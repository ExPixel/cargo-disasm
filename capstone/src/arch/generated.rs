/* automatically generated by rust-bindgen 0.55.1 */

pub type __int8_t = libc::c_schar;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub const ARM_SFT_INVALID: arm_shifter = 0;
pub const ARM_SFT_ASR: arm_shifter = 1;
pub const ARM_SFT_LSL: arm_shifter = 2;
pub const ARM_SFT_LSR: arm_shifter = 3;
pub const ARM_SFT_ROR: arm_shifter = 4;
pub const ARM_SFT_RRX: arm_shifter = 5;
pub const ARM_SFT_ASR_REG: arm_shifter = 6;
pub const ARM_SFT_LSL_REG: arm_shifter = 7;
pub const ARM_SFT_LSR_REG: arm_shifter = 8;
pub const ARM_SFT_ROR_REG: arm_shifter = 9;
pub const ARM_SFT_RRX_REG: arm_shifter = 10;
pub type arm_shifter = libc::c_uint;
pub const ARM_CC_INVALID: arm_cc = 0;
pub const ARM_CC_EQ: arm_cc = 1;
pub const ARM_CC_NE: arm_cc = 2;
pub const ARM_CC_HS: arm_cc = 3;
pub const ARM_CC_LO: arm_cc = 4;
pub const ARM_CC_MI: arm_cc = 5;
pub const ARM_CC_PL: arm_cc = 6;
pub const ARM_CC_VS: arm_cc = 7;
pub const ARM_CC_VC: arm_cc = 8;
pub const ARM_CC_HI: arm_cc = 9;
pub const ARM_CC_LS: arm_cc = 10;
pub const ARM_CC_GE: arm_cc = 11;
pub const ARM_CC_LT: arm_cc = 12;
pub const ARM_CC_GT: arm_cc = 13;
pub const ARM_CC_LE: arm_cc = 14;
pub const ARM_CC_AL: arm_cc = 15;
pub type arm_cc = libc::c_uint;
pub const ARM_MB_INVALID: arm_mem_barrier = 0;
pub const ARM_MB_RESERVED_0: arm_mem_barrier = 1;
pub const ARM_MB_OSHLD: arm_mem_barrier = 2;
pub const ARM_MB_OSHST: arm_mem_barrier = 3;
pub const ARM_MB_OSH: arm_mem_barrier = 4;
pub const ARM_MB_RESERVED_4: arm_mem_barrier = 5;
pub const ARM_MB_NSHLD: arm_mem_barrier = 6;
pub const ARM_MB_NSHST: arm_mem_barrier = 7;
pub const ARM_MB_NSH: arm_mem_barrier = 8;
pub const ARM_MB_RESERVED_8: arm_mem_barrier = 9;
pub const ARM_MB_ISHLD: arm_mem_barrier = 10;
pub const ARM_MB_ISHST: arm_mem_barrier = 11;
pub const ARM_MB_ISH: arm_mem_barrier = 12;
pub const ARM_MB_RESERVED_12: arm_mem_barrier = 13;
pub const ARM_MB_LD: arm_mem_barrier = 14;
pub const ARM_MB_ST: arm_mem_barrier = 15;
pub const ARM_MB_SY: arm_mem_barrier = 16;
pub type arm_mem_barrier = libc::c_uint;
pub const ARM_OP_INVALID: arm_op_type = 0;
pub const ARM_OP_REG: arm_op_type = 1;
pub const ARM_OP_IMM: arm_op_type = 2;
pub const ARM_OP_MEM: arm_op_type = 3;
pub const ARM_OP_FP: arm_op_type = 4;
pub const ARM_OP_CIMM: arm_op_type = 64;
pub const ARM_OP_PIMM: arm_op_type = 65;
pub const ARM_OP_SETEND: arm_op_type = 66;
pub const ARM_OP_SYSREG: arm_op_type = 67;
pub type arm_op_type = libc::c_uint;
pub const ARM_SETEND_INVALID: arm_setend_type = 0;
pub const ARM_SETEND_BE: arm_setend_type = 1;
pub const ARM_SETEND_LE: arm_setend_type = 2;
pub type arm_setend_type = libc::c_uint;
pub const ARM_CPSMODE_INVALID: arm_cpsmode_type = 0;
pub const ARM_CPSMODE_IE: arm_cpsmode_type = 2;
pub const ARM_CPSMODE_ID: arm_cpsmode_type = 3;
pub type arm_cpsmode_type = libc::c_uint;
pub const ARM_CPSFLAG_INVALID: arm_cpsflag_type = 0;
pub const ARM_CPSFLAG_F: arm_cpsflag_type = 1;
pub const ARM_CPSFLAG_I: arm_cpsflag_type = 2;
pub const ARM_CPSFLAG_A: arm_cpsflag_type = 4;
pub const ARM_CPSFLAG_NONE: arm_cpsflag_type = 16;
pub type arm_cpsflag_type = libc::c_uint;
pub const ARM_VECTORDATA_INVALID: arm_vectordata_type = 0;
pub const ARM_VECTORDATA_I8: arm_vectordata_type = 1;
pub const ARM_VECTORDATA_I16: arm_vectordata_type = 2;
pub const ARM_VECTORDATA_I32: arm_vectordata_type = 3;
pub const ARM_VECTORDATA_I64: arm_vectordata_type = 4;
pub const ARM_VECTORDATA_S8: arm_vectordata_type = 5;
pub const ARM_VECTORDATA_S16: arm_vectordata_type = 6;
pub const ARM_VECTORDATA_S32: arm_vectordata_type = 7;
pub const ARM_VECTORDATA_S64: arm_vectordata_type = 8;
pub const ARM_VECTORDATA_U8: arm_vectordata_type = 9;
pub const ARM_VECTORDATA_U16: arm_vectordata_type = 10;
pub const ARM_VECTORDATA_U32: arm_vectordata_type = 11;
pub const ARM_VECTORDATA_U64: arm_vectordata_type = 12;
pub const ARM_VECTORDATA_P8: arm_vectordata_type = 13;
pub const ARM_VECTORDATA_F32: arm_vectordata_type = 14;
pub const ARM_VECTORDATA_F64: arm_vectordata_type = 15;
pub const ARM_VECTORDATA_F16F64: arm_vectordata_type = 16;
pub const ARM_VECTORDATA_F64F16: arm_vectordata_type = 17;
pub const ARM_VECTORDATA_F32F16: arm_vectordata_type = 18;
pub const ARM_VECTORDATA_F16F32: arm_vectordata_type = 19;
pub const ARM_VECTORDATA_F64F32: arm_vectordata_type = 20;
pub const ARM_VECTORDATA_F32F64: arm_vectordata_type = 21;
pub const ARM_VECTORDATA_S32F32: arm_vectordata_type = 22;
pub const ARM_VECTORDATA_U32F32: arm_vectordata_type = 23;
pub const ARM_VECTORDATA_F32S32: arm_vectordata_type = 24;
pub const ARM_VECTORDATA_F32U32: arm_vectordata_type = 25;
pub const ARM_VECTORDATA_F64S16: arm_vectordata_type = 26;
pub const ARM_VECTORDATA_F32S16: arm_vectordata_type = 27;
pub const ARM_VECTORDATA_F64S32: arm_vectordata_type = 28;
pub const ARM_VECTORDATA_S16F64: arm_vectordata_type = 29;
pub const ARM_VECTORDATA_S16F32: arm_vectordata_type = 30;
pub const ARM_VECTORDATA_S32F64: arm_vectordata_type = 31;
pub const ARM_VECTORDATA_U16F64: arm_vectordata_type = 32;
pub const ARM_VECTORDATA_U16F32: arm_vectordata_type = 33;
pub const ARM_VECTORDATA_U32F64: arm_vectordata_type = 34;
pub const ARM_VECTORDATA_F64U16: arm_vectordata_type = 35;
pub const ARM_VECTORDATA_F32U16: arm_vectordata_type = 36;
pub const ARM_VECTORDATA_F64U32: arm_vectordata_type = 37;
pub type arm_vectordata_type = libc::c_uint;
pub const ARM_REG_INVALID: arm_reg = 0;
pub const ARM_REG_APSR: arm_reg = 1;
pub const ARM_REG_APSR_NZCV: arm_reg = 2;
pub const ARM_REG_CPSR: arm_reg = 3;
pub const ARM_REG_FPEXC: arm_reg = 4;
pub const ARM_REG_FPINST: arm_reg = 5;
pub const ARM_REG_FPSCR: arm_reg = 6;
pub const ARM_REG_FPSCR_NZCV: arm_reg = 7;
pub const ARM_REG_FPSID: arm_reg = 8;
pub const ARM_REG_ITSTATE: arm_reg = 9;
pub const ARM_REG_LR: arm_reg = 10;
pub const ARM_REG_PC: arm_reg = 11;
pub const ARM_REG_SP: arm_reg = 12;
pub const ARM_REG_SPSR: arm_reg = 13;
pub const ARM_REG_D0: arm_reg = 14;
pub const ARM_REG_D1: arm_reg = 15;
pub const ARM_REG_D2: arm_reg = 16;
pub const ARM_REG_D3: arm_reg = 17;
pub const ARM_REG_D4: arm_reg = 18;
pub const ARM_REG_D5: arm_reg = 19;
pub const ARM_REG_D6: arm_reg = 20;
pub const ARM_REG_D7: arm_reg = 21;
pub const ARM_REG_D8: arm_reg = 22;
pub const ARM_REG_D9: arm_reg = 23;
pub const ARM_REG_D10: arm_reg = 24;
pub const ARM_REG_D11: arm_reg = 25;
pub const ARM_REG_D12: arm_reg = 26;
pub const ARM_REG_D13: arm_reg = 27;
pub const ARM_REG_D14: arm_reg = 28;
pub const ARM_REG_D15: arm_reg = 29;
pub const ARM_REG_D16: arm_reg = 30;
pub const ARM_REG_D17: arm_reg = 31;
pub const ARM_REG_D18: arm_reg = 32;
pub const ARM_REG_D19: arm_reg = 33;
pub const ARM_REG_D20: arm_reg = 34;
pub const ARM_REG_D21: arm_reg = 35;
pub const ARM_REG_D22: arm_reg = 36;
pub const ARM_REG_D23: arm_reg = 37;
pub const ARM_REG_D24: arm_reg = 38;
pub const ARM_REG_D25: arm_reg = 39;
pub const ARM_REG_D26: arm_reg = 40;
pub const ARM_REG_D27: arm_reg = 41;
pub const ARM_REG_D28: arm_reg = 42;
pub const ARM_REG_D29: arm_reg = 43;
pub const ARM_REG_D30: arm_reg = 44;
pub const ARM_REG_D31: arm_reg = 45;
pub const ARM_REG_FPINST2: arm_reg = 46;
pub const ARM_REG_MVFR0: arm_reg = 47;
pub const ARM_REG_MVFR1: arm_reg = 48;
pub const ARM_REG_MVFR2: arm_reg = 49;
pub const ARM_REG_Q0: arm_reg = 50;
pub const ARM_REG_Q1: arm_reg = 51;
pub const ARM_REG_Q2: arm_reg = 52;
pub const ARM_REG_Q3: arm_reg = 53;
pub const ARM_REG_Q4: arm_reg = 54;
pub const ARM_REG_Q5: arm_reg = 55;
pub const ARM_REG_Q6: arm_reg = 56;
pub const ARM_REG_Q7: arm_reg = 57;
pub const ARM_REG_Q8: arm_reg = 58;
pub const ARM_REG_Q9: arm_reg = 59;
pub const ARM_REG_Q10: arm_reg = 60;
pub const ARM_REG_Q11: arm_reg = 61;
pub const ARM_REG_Q12: arm_reg = 62;
pub const ARM_REG_Q13: arm_reg = 63;
pub const ARM_REG_Q14: arm_reg = 64;
pub const ARM_REG_Q15: arm_reg = 65;
pub const ARM_REG_R0: arm_reg = 66;
pub const ARM_REG_R1: arm_reg = 67;
pub const ARM_REG_R2: arm_reg = 68;
pub const ARM_REG_R3: arm_reg = 69;
pub const ARM_REG_R4: arm_reg = 70;
pub const ARM_REG_R5: arm_reg = 71;
pub const ARM_REG_R6: arm_reg = 72;
pub const ARM_REG_R7: arm_reg = 73;
pub const ARM_REG_R8: arm_reg = 74;
pub const ARM_REG_R9: arm_reg = 75;
pub const ARM_REG_R10: arm_reg = 76;
pub const ARM_REG_R11: arm_reg = 77;
pub const ARM_REG_R12: arm_reg = 78;
pub const ARM_REG_S0: arm_reg = 79;
pub const ARM_REG_S1: arm_reg = 80;
pub const ARM_REG_S2: arm_reg = 81;
pub const ARM_REG_S3: arm_reg = 82;
pub const ARM_REG_S4: arm_reg = 83;
pub const ARM_REG_S5: arm_reg = 84;
pub const ARM_REG_S6: arm_reg = 85;
pub const ARM_REG_S7: arm_reg = 86;
pub const ARM_REG_S8: arm_reg = 87;
pub const ARM_REG_S9: arm_reg = 88;
pub const ARM_REG_S10: arm_reg = 89;
pub const ARM_REG_S11: arm_reg = 90;
pub const ARM_REG_S12: arm_reg = 91;
pub const ARM_REG_S13: arm_reg = 92;
pub const ARM_REG_S14: arm_reg = 93;
pub const ARM_REG_S15: arm_reg = 94;
pub const ARM_REG_S16: arm_reg = 95;
pub const ARM_REG_S17: arm_reg = 96;
pub const ARM_REG_S18: arm_reg = 97;
pub const ARM_REG_S19: arm_reg = 98;
pub const ARM_REG_S20: arm_reg = 99;
pub const ARM_REG_S21: arm_reg = 100;
pub const ARM_REG_S22: arm_reg = 101;
pub const ARM_REG_S23: arm_reg = 102;
pub const ARM_REG_S24: arm_reg = 103;
pub const ARM_REG_S25: arm_reg = 104;
pub const ARM_REG_S26: arm_reg = 105;
pub const ARM_REG_S27: arm_reg = 106;
pub const ARM_REG_S28: arm_reg = 107;
pub const ARM_REG_S29: arm_reg = 108;
pub const ARM_REG_S30: arm_reg = 109;
pub const ARM_REG_S31: arm_reg = 110;
pub const ARM_REG_ENDING: arm_reg = 111;
pub const ARM_REG_R13: arm_reg = 12;
pub const ARM_REG_R14: arm_reg = 10;
pub const ARM_REG_R15: arm_reg = 11;
pub const ARM_REG_SB: arm_reg = 75;
pub const ARM_REG_SL: arm_reg = 76;
pub const ARM_REG_FP: arm_reg = 77;
pub const ARM_REG_IP: arm_reg = 78;
pub type arm_reg = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm_op_mem {
    pub base: arm_reg,
    pub index: arm_reg,
    pub scale: libc::c_int,
    pub disp: libc::c_int,
    pub lshift: libc::c_int,
}
#[test]
fn bindgen_test_layout_arm_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<arm_op_mem>(),
        20usize,
        concat!("Size of: ", stringify!(arm_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<arm_op_mem>(),
        4usize,
        concat!("Alignment of ", stringify!(arm_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<arm_op_mem>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_op_mem),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<arm_op_mem>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_op_mem),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<arm_op_mem>())).scale as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_op_mem),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<arm_op_mem>())).disp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_op_mem),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<arm_op_mem>())).lshift as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(arm_op_mem),
            "::",
            stringify!(lshift)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm_op {
    pub vector_index: libc::c_int,
    pub shift: cs_arm_op__bindgen_ty_1,
    pub type_: arm_op_type,
    pub __bindgen_anon_1: cs_arm_op__bindgen_ty_2,
    pub subtracted: bool,
    pub access: u8,
    pub neon_lane: i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_arm_op__bindgen_ty_1 {
    pub type_: arm_shifter,
    pub value: libc::c_uint,
}
#[test]
fn bindgen_test_layout_cs_arm_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_arm_op__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cs_arm_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_arm_op__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_arm_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op__bindgen_ty_1>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op__bindgen_ty_1>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_arm_op__bindgen_ty_2 {
    pub reg: libc::c_int,
    pub imm: i32,
    pub fp: f64,
    pub mem: arm_op_mem,
    pub setend: arm_setend_type,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_cs_arm_op__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<cs_arm_op__bindgen_ty_2>(),
        24usize,
        concat!("Size of: ", stringify!(cs_arm_op__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_arm_op__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_arm_op__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op__bindgen_ty_2>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op__bindgen_ty_2),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op__bindgen_ty_2>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op__bindgen_ty_2),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op__bindgen_ty_2>())).fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op__bindgen_ty_2),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op__bindgen_ty_2>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op__bindgen_ty_2),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op__bindgen_ty_2>())).setend as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op__bindgen_ty_2),
            "::",
            stringify!(setend)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_arm_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_arm_op>(),
        48usize,
        concat!("Size of: ", stringify!(cs_arm_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_arm_op>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_arm_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op>())).vector_index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op),
            "::",
            stringify!(vector_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op>())).shift as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op>())).type_ as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op>())).subtracted as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op),
            "::",
            stringify!(subtracted)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op>())).access as *const _ as usize },
        41usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm_op>())).neon_lane as *const _ as usize },
        42usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm_op),
            "::",
            stringify!(neon_lane)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm {
    pub usermode: bool,
    pub vector_size: libc::c_int,
    pub vector_data: arm_vectordata_type,
    pub cps_mode: arm_cpsmode_type,
    pub cps_flag: arm_cpsflag_type,
    pub cc: arm_cc,
    pub update_flags: bool,
    pub writeback: bool,
    pub mem_barrier: arm_mem_barrier,
    pub op_count: u8,
    pub operands: [cs_arm_op; 36usize],
}
#[test]
fn bindgen_test_layout_cs_arm() {
    assert_eq!(
        ::core::mem::size_of::<cs_arm>(),
        1768usize,
        concat!("Size of: ", stringify!(cs_arm))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_arm>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_arm))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).usermode as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(usermode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).vector_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(vector_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).vector_data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(vector_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).cps_mode as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(cps_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).cps_flag as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(cps_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).cc as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).update_flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(update_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).writeback as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(writeback)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).mem_barrier as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(mem_barrier)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).op_count as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm>())).operands as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm),
            "::",
            stringify!(operands)
        )
    );
}
pub const ARM64_SFT_INVALID: arm64_shifter = 0;
pub const ARM64_SFT_LSL: arm64_shifter = 1;
pub const ARM64_SFT_MSL: arm64_shifter = 2;
pub const ARM64_SFT_LSR: arm64_shifter = 3;
pub const ARM64_SFT_ASR: arm64_shifter = 4;
pub const ARM64_SFT_ROR: arm64_shifter = 5;
pub type arm64_shifter = libc::c_uint;
pub const ARM64_EXT_INVALID: arm64_extender = 0;
pub const ARM64_EXT_UXTB: arm64_extender = 1;
pub const ARM64_EXT_UXTH: arm64_extender = 2;
pub const ARM64_EXT_UXTW: arm64_extender = 3;
pub const ARM64_EXT_UXTX: arm64_extender = 4;
pub const ARM64_EXT_SXTB: arm64_extender = 5;
pub const ARM64_EXT_SXTH: arm64_extender = 6;
pub const ARM64_EXT_SXTW: arm64_extender = 7;
pub const ARM64_EXT_SXTX: arm64_extender = 8;
pub type arm64_extender = libc::c_uint;
pub const ARM64_CC_INVALID: arm64_cc = 0;
pub const ARM64_CC_EQ: arm64_cc = 1;
pub const ARM64_CC_NE: arm64_cc = 2;
pub const ARM64_CC_HS: arm64_cc = 3;
pub const ARM64_CC_LO: arm64_cc = 4;
pub const ARM64_CC_MI: arm64_cc = 5;
pub const ARM64_CC_PL: arm64_cc = 6;
pub const ARM64_CC_VS: arm64_cc = 7;
pub const ARM64_CC_VC: arm64_cc = 8;
pub const ARM64_CC_HI: arm64_cc = 9;
pub const ARM64_CC_LS: arm64_cc = 10;
pub const ARM64_CC_GE: arm64_cc = 11;
pub const ARM64_CC_LT: arm64_cc = 12;
pub const ARM64_CC_GT: arm64_cc = 13;
pub const ARM64_CC_LE: arm64_cc = 14;
pub const ARM64_CC_AL: arm64_cc = 15;
pub const ARM64_CC_NV: arm64_cc = 16;
pub type arm64_cc = libc::c_uint;
pub const ARM64_PSTATE_INVALID: arm64_pstate = 0;
pub const ARM64_PSTATE_SPSEL: arm64_pstate = 5;
pub const ARM64_PSTATE_DAIFSET: arm64_pstate = 30;
pub const ARM64_PSTATE_DAIFCLR: arm64_pstate = 31;
pub type arm64_pstate = libc::c_uint;
pub const ARM64_VAS_INVALID: arm64_vas = 0;
pub const ARM64_VAS_8B: arm64_vas = 1;
pub const ARM64_VAS_16B: arm64_vas = 2;
pub const ARM64_VAS_4H: arm64_vas = 3;
pub const ARM64_VAS_8H: arm64_vas = 4;
pub const ARM64_VAS_2S: arm64_vas = 5;
pub const ARM64_VAS_4S: arm64_vas = 6;
pub const ARM64_VAS_1D: arm64_vas = 7;
pub const ARM64_VAS_2D: arm64_vas = 8;
pub const ARM64_VAS_1Q: arm64_vas = 9;
pub type arm64_vas = libc::c_uint;
pub const ARM64_VESS_INVALID: arm64_vess = 0;
pub const ARM64_VESS_B: arm64_vess = 1;
pub const ARM64_VESS_H: arm64_vess = 2;
pub const ARM64_VESS_S: arm64_vess = 3;
pub const ARM64_VESS_D: arm64_vess = 4;
pub type arm64_vess = libc::c_uint;
pub const ARM64_BARRIER_INVALID: arm64_barrier_op = 0;
pub const ARM64_BARRIER_OSHLD: arm64_barrier_op = 1;
pub const ARM64_BARRIER_OSHST: arm64_barrier_op = 2;
pub const ARM64_BARRIER_OSH: arm64_barrier_op = 3;
pub const ARM64_BARRIER_NSHLD: arm64_barrier_op = 5;
pub const ARM64_BARRIER_NSHST: arm64_barrier_op = 6;
pub const ARM64_BARRIER_NSH: arm64_barrier_op = 7;
pub const ARM64_BARRIER_ISHLD: arm64_barrier_op = 9;
pub const ARM64_BARRIER_ISHST: arm64_barrier_op = 10;
pub const ARM64_BARRIER_ISH: arm64_barrier_op = 11;
pub const ARM64_BARRIER_LD: arm64_barrier_op = 13;
pub const ARM64_BARRIER_ST: arm64_barrier_op = 14;
pub const ARM64_BARRIER_SY: arm64_barrier_op = 15;
pub type arm64_barrier_op = libc::c_uint;
pub const ARM64_OP_INVALID: arm64_op_type = 0;
pub const ARM64_OP_REG: arm64_op_type = 1;
pub const ARM64_OP_IMM: arm64_op_type = 2;
pub const ARM64_OP_MEM: arm64_op_type = 3;
pub const ARM64_OP_FP: arm64_op_type = 4;
pub const ARM64_OP_CIMM: arm64_op_type = 64;
pub const ARM64_OP_REG_MRS: arm64_op_type = 65;
pub const ARM64_OP_REG_MSR: arm64_op_type = 66;
pub const ARM64_OP_PSTATE: arm64_op_type = 67;
pub const ARM64_OP_SYS: arm64_op_type = 68;
pub const ARM64_OP_PREFETCH: arm64_op_type = 69;
pub const ARM64_OP_BARRIER: arm64_op_type = 70;
pub type arm64_op_type = libc::c_uint;
pub const ARM64_PRFM_INVALID: arm64_prefetch_op = 0;
pub const ARM64_PRFM_PLDL1KEEP: arm64_prefetch_op = 1;
pub const ARM64_PRFM_PLDL1STRM: arm64_prefetch_op = 2;
pub const ARM64_PRFM_PLDL2KEEP: arm64_prefetch_op = 3;
pub const ARM64_PRFM_PLDL2STRM: arm64_prefetch_op = 4;
pub const ARM64_PRFM_PLDL3KEEP: arm64_prefetch_op = 5;
pub const ARM64_PRFM_PLDL3STRM: arm64_prefetch_op = 6;
pub const ARM64_PRFM_PLIL1KEEP: arm64_prefetch_op = 9;
pub const ARM64_PRFM_PLIL1STRM: arm64_prefetch_op = 10;
pub const ARM64_PRFM_PLIL2KEEP: arm64_prefetch_op = 11;
pub const ARM64_PRFM_PLIL2STRM: arm64_prefetch_op = 12;
pub const ARM64_PRFM_PLIL3KEEP: arm64_prefetch_op = 13;
pub const ARM64_PRFM_PLIL3STRM: arm64_prefetch_op = 14;
pub const ARM64_PRFM_PSTL1KEEP: arm64_prefetch_op = 17;
pub const ARM64_PRFM_PSTL1STRM: arm64_prefetch_op = 18;
pub const ARM64_PRFM_PSTL2KEEP: arm64_prefetch_op = 19;
pub const ARM64_PRFM_PSTL2STRM: arm64_prefetch_op = 20;
pub const ARM64_PRFM_PSTL3KEEP: arm64_prefetch_op = 21;
pub const ARM64_PRFM_PSTL3STRM: arm64_prefetch_op = 22;
pub type arm64_prefetch_op = libc::c_uint;
pub const ARM64_REG_INVALID: arm64_reg = 0;
pub const ARM64_REG_X29: arm64_reg = 1;
pub const ARM64_REG_X30: arm64_reg = 2;
pub const ARM64_REG_NZCV: arm64_reg = 3;
pub const ARM64_REG_SP: arm64_reg = 4;
pub const ARM64_REG_WSP: arm64_reg = 5;
pub const ARM64_REG_WZR: arm64_reg = 6;
pub const ARM64_REG_XZR: arm64_reg = 7;
pub const ARM64_REG_B0: arm64_reg = 8;
pub const ARM64_REG_B1: arm64_reg = 9;
pub const ARM64_REG_B2: arm64_reg = 10;
pub const ARM64_REG_B3: arm64_reg = 11;
pub const ARM64_REG_B4: arm64_reg = 12;
pub const ARM64_REG_B5: arm64_reg = 13;
pub const ARM64_REG_B6: arm64_reg = 14;
pub const ARM64_REG_B7: arm64_reg = 15;
pub const ARM64_REG_B8: arm64_reg = 16;
pub const ARM64_REG_B9: arm64_reg = 17;
pub const ARM64_REG_B10: arm64_reg = 18;
pub const ARM64_REG_B11: arm64_reg = 19;
pub const ARM64_REG_B12: arm64_reg = 20;
pub const ARM64_REG_B13: arm64_reg = 21;
pub const ARM64_REG_B14: arm64_reg = 22;
pub const ARM64_REG_B15: arm64_reg = 23;
pub const ARM64_REG_B16: arm64_reg = 24;
pub const ARM64_REG_B17: arm64_reg = 25;
pub const ARM64_REG_B18: arm64_reg = 26;
pub const ARM64_REG_B19: arm64_reg = 27;
pub const ARM64_REG_B20: arm64_reg = 28;
pub const ARM64_REG_B21: arm64_reg = 29;
pub const ARM64_REG_B22: arm64_reg = 30;
pub const ARM64_REG_B23: arm64_reg = 31;
pub const ARM64_REG_B24: arm64_reg = 32;
pub const ARM64_REG_B25: arm64_reg = 33;
pub const ARM64_REG_B26: arm64_reg = 34;
pub const ARM64_REG_B27: arm64_reg = 35;
pub const ARM64_REG_B28: arm64_reg = 36;
pub const ARM64_REG_B29: arm64_reg = 37;
pub const ARM64_REG_B30: arm64_reg = 38;
pub const ARM64_REG_B31: arm64_reg = 39;
pub const ARM64_REG_D0: arm64_reg = 40;
pub const ARM64_REG_D1: arm64_reg = 41;
pub const ARM64_REG_D2: arm64_reg = 42;
pub const ARM64_REG_D3: arm64_reg = 43;
pub const ARM64_REG_D4: arm64_reg = 44;
pub const ARM64_REG_D5: arm64_reg = 45;
pub const ARM64_REG_D6: arm64_reg = 46;
pub const ARM64_REG_D7: arm64_reg = 47;
pub const ARM64_REG_D8: arm64_reg = 48;
pub const ARM64_REG_D9: arm64_reg = 49;
pub const ARM64_REG_D10: arm64_reg = 50;
pub const ARM64_REG_D11: arm64_reg = 51;
pub const ARM64_REG_D12: arm64_reg = 52;
pub const ARM64_REG_D13: arm64_reg = 53;
pub const ARM64_REG_D14: arm64_reg = 54;
pub const ARM64_REG_D15: arm64_reg = 55;
pub const ARM64_REG_D16: arm64_reg = 56;
pub const ARM64_REG_D17: arm64_reg = 57;
pub const ARM64_REG_D18: arm64_reg = 58;
pub const ARM64_REG_D19: arm64_reg = 59;
pub const ARM64_REG_D20: arm64_reg = 60;
pub const ARM64_REG_D21: arm64_reg = 61;
pub const ARM64_REG_D22: arm64_reg = 62;
pub const ARM64_REG_D23: arm64_reg = 63;
pub const ARM64_REG_D24: arm64_reg = 64;
pub const ARM64_REG_D25: arm64_reg = 65;
pub const ARM64_REG_D26: arm64_reg = 66;
pub const ARM64_REG_D27: arm64_reg = 67;
pub const ARM64_REG_D28: arm64_reg = 68;
pub const ARM64_REG_D29: arm64_reg = 69;
pub const ARM64_REG_D30: arm64_reg = 70;
pub const ARM64_REG_D31: arm64_reg = 71;
pub const ARM64_REG_H0: arm64_reg = 72;
pub const ARM64_REG_H1: arm64_reg = 73;
pub const ARM64_REG_H2: arm64_reg = 74;
pub const ARM64_REG_H3: arm64_reg = 75;
pub const ARM64_REG_H4: arm64_reg = 76;
pub const ARM64_REG_H5: arm64_reg = 77;
pub const ARM64_REG_H6: arm64_reg = 78;
pub const ARM64_REG_H7: arm64_reg = 79;
pub const ARM64_REG_H8: arm64_reg = 80;
pub const ARM64_REG_H9: arm64_reg = 81;
pub const ARM64_REG_H10: arm64_reg = 82;
pub const ARM64_REG_H11: arm64_reg = 83;
pub const ARM64_REG_H12: arm64_reg = 84;
pub const ARM64_REG_H13: arm64_reg = 85;
pub const ARM64_REG_H14: arm64_reg = 86;
pub const ARM64_REG_H15: arm64_reg = 87;
pub const ARM64_REG_H16: arm64_reg = 88;
pub const ARM64_REG_H17: arm64_reg = 89;
pub const ARM64_REG_H18: arm64_reg = 90;
pub const ARM64_REG_H19: arm64_reg = 91;
pub const ARM64_REG_H20: arm64_reg = 92;
pub const ARM64_REG_H21: arm64_reg = 93;
pub const ARM64_REG_H22: arm64_reg = 94;
pub const ARM64_REG_H23: arm64_reg = 95;
pub const ARM64_REG_H24: arm64_reg = 96;
pub const ARM64_REG_H25: arm64_reg = 97;
pub const ARM64_REG_H26: arm64_reg = 98;
pub const ARM64_REG_H27: arm64_reg = 99;
pub const ARM64_REG_H28: arm64_reg = 100;
pub const ARM64_REG_H29: arm64_reg = 101;
pub const ARM64_REG_H30: arm64_reg = 102;
pub const ARM64_REG_H31: arm64_reg = 103;
pub const ARM64_REG_Q0: arm64_reg = 104;
pub const ARM64_REG_Q1: arm64_reg = 105;
pub const ARM64_REG_Q2: arm64_reg = 106;
pub const ARM64_REG_Q3: arm64_reg = 107;
pub const ARM64_REG_Q4: arm64_reg = 108;
pub const ARM64_REG_Q5: arm64_reg = 109;
pub const ARM64_REG_Q6: arm64_reg = 110;
pub const ARM64_REG_Q7: arm64_reg = 111;
pub const ARM64_REG_Q8: arm64_reg = 112;
pub const ARM64_REG_Q9: arm64_reg = 113;
pub const ARM64_REG_Q10: arm64_reg = 114;
pub const ARM64_REG_Q11: arm64_reg = 115;
pub const ARM64_REG_Q12: arm64_reg = 116;
pub const ARM64_REG_Q13: arm64_reg = 117;
pub const ARM64_REG_Q14: arm64_reg = 118;
pub const ARM64_REG_Q15: arm64_reg = 119;
pub const ARM64_REG_Q16: arm64_reg = 120;
pub const ARM64_REG_Q17: arm64_reg = 121;
pub const ARM64_REG_Q18: arm64_reg = 122;
pub const ARM64_REG_Q19: arm64_reg = 123;
pub const ARM64_REG_Q20: arm64_reg = 124;
pub const ARM64_REG_Q21: arm64_reg = 125;
pub const ARM64_REG_Q22: arm64_reg = 126;
pub const ARM64_REG_Q23: arm64_reg = 127;
pub const ARM64_REG_Q24: arm64_reg = 128;
pub const ARM64_REG_Q25: arm64_reg = 129;
pub const ARM64_REG_Q26: arm64_reg = 130;
pub const ARM64_REG_Q27: arm64_reg = 131;
pub const ARM64_REG_Q28: arm64_reg = 132;
pub const ARM64_REG_Q29: arm64_reg = 133;
pub const ARM64_REG_Q30: arm64_reg = 134;
pub const ARM64_REG_Q31: arm64_reg = 135;
pub const ARM64_REG_S0: arm64_reg = 136;
pub const ARM64_REG_S1: arm64_reg = 137;
pub const ARM64_REG_S2: arm64_reg = 138;
pub const ARM64_REG_S3: arm64_reg = 139;
pub const ARM64_REG_S4: arm64_reg = 140;
pub const ARM64_REG_S5: arm64_reg = 141;
pub const ARM64_REG_S6: arm64_reg = 142;
pub const ARM64_REG_S7: arm64_reg = 143;
pub const ARM64_REG_S8: arm64_reg = 144;
pub const ARM64_REG_S9: arm64_reg = 145;
pub const ARM64_REG_S10: arm64_reg = 146;
pub const ARM64_REG_S11: arm64_reg = 147;
pub const ARM64_REG_S12: arm64_reg = 148;
pub const ARM64_REG_S13: arm64_reg = 149;
pub const ARM64_REG_S14: arm64_reg = 150;
pub const ARM64_REG_S15: arm64_reg = 151;
pub const ARM64_REG_S16: arm64_reg = 152;
pub const ARM64_REG_S17: arm64_reg = 153;
pub const ARM64_REG_S18: arm64_reg = 154;
pub const ARM64_REG_S19: arm64_reg = 155;
pub const ARM64_REG_S20: arm64_reg = 156;
pub const ARM64_REG_S21: arm64_reg = 157;
pub const ARM64_REG_S22: arm64_reg = 158;
pub const ARM64_REG_S23: arm64_reg = 159;
pub const ARM64_REG_S24: arm64_reg = 160;
pub const ARM64_REG_S25: arm64_reg = 161;
pub const ARM64_REG_S26: arm64_reg = 162;
pub const ARM64_REG_S27: arm64_reg = 163;
pub const ARM64_REG_S28: arm64_reg = 164;
pub const ARM64_REG_S29: arm64_reg = 165;
pub const ARM64_REG_S30: arm64_reg = 166;
pub const ARM64_REG_S31: arm64_reg = 167;
pub const ARM64_REG_W0: arm64_reg = 168;
pub const ARM64_REG_W1: arm64_reg = 169;
pub const ARM64_REG_W2: arm64_reg = 170;
pub const ARM64_REG_W3: arm64_reg = 171;
pub const ARM64_REG_W4: arm64_reg = 172;
pub const ARM64_REG_W5: arm64_reg = 173;
pub const ARM64_REG_W6: arm64_reg = 174;
pub const ARM64_REG_W7: arm64_reg = 175;
pub const ARM64_REG_W8: arm64_reg = 176;
pub const ARM64_REG_W9: arm64_reg = 177;
pub const ARM64_REG_W10: arm64_reg = 178;
pub const ARM64_REG_W11: arm64_reg = 179;
pub const ARM64_REG_W12: arm64_reg = 180;
pub const ARM64_REG_W13: arm64_reg = 181;
pub const ARM64_REG_W14: arm64_reg = 182;
pub const ARM64_REG_W15: arm64_reg = 183;
pub const ARM64_REG_W16: arm64_reg = 184;
pub const ARM64_REG_W17: arm64_reg = 185;
pub const ARM64_REG_W18: arm64_reg = 186;
pub const ARM64_REG_W19: arm64_reg = 187;
pub const ARM64_REG_W20: arm64_reg = 188;
pub const ARM64_REG_W21: arm64_reg = 189;
pub const ARM64_REG_W22: arm64_reg = 190;
pub const ARM64_REG_W23: arm64_reg = 191;
pub const ARM64_REG_W24: arm64_reg = 192;
pub const ARM64_REG_W25: arm64_reg = 193;
pub const ARM64_REG_W26: arm64_reg = 194;
pub const ARM64_REG_W27: arm64_reg = 195;
pub const ARM64_REG_W28: arm64_reg = 196;
pub const ARM64_REG_W29: arm64_reg = 197;
pub const ARM64_REG_W30: arm64_reg = 198;
pub const ARM64_REG_X0: arm64_reg = 199;
pub const ARM64_REG_X1: arm64_reg = 200;
pub const ARM64_REG_X2: arm64_reg = 201;
pub const ARM64_REG_X3: arm64_reg = 202;
pub const ARM64_REG_X4: arm64_reg = 203;
pub const ARM64_REG_X5: arm64_reg = 204;
pub const ARM64_REG_X6: arm64_reg = 205;
pub const ARM64_REG_X7: arm64_reg = 206;
pub const ARM64_REG_X8: arm64_reg = 207;
pub const ARM64_REG_X9: arm64_reg = 208;
pub const ARM64_REG_X10: arm64_reg = 209;
pub const ARM64_REG_X11: arm64_reg = 210;
pub const ARM64_REG_X12: arm64_reg = 211;
pub const ARM64_REG_X13: arm64_reg = 212;
pub const ARM64_REG_X14: arm64_reg = 213;
pub const ARM64_REG_X15: arm64_reg = 214;
pub const ARM64_REG_X16: arm64_reg = 215;
pub const ARM64_REG_X17: arm64_reg = 216;
pub const ARM64_REG_X18: arm64_reg = 217;
pub const ARM64_REG_X19: arm64_reg = 218;
pub const ARM64_REG_X20: arm64_reg = 219;
pub const ARM64_REG_X21: arm64_reg = 220;
pub const ARM64_REG_X22: arm64_reg = 221;
pub const ARM64_REG_X23: arm64_reg = 222;
pub const ARM64_REG_X24: arm64_reg = 223;
pub const ARM64_REG_X25: arm64_reg = 224;
pub const ARM64_REG_X26: arm64_reg = 225;
pub const ARM64_REG_X27: arm64_reg = 226;
pub const ARM64_REG_X28: arm64_reg = 227;
pub const ARM64_REG_V0: arm64_reg = 228;
pub const ARM64_REG_V1: arm64_reg = 229;
pub const ARM64_REG_V2: arm64_reg = 230;
pub const ARM64_REG_V3: arm64_reg = 231;
pub const ARM64_REG_V4: arm64_reg = 232;
pub const ARM64_REG_V5: arm64_reg = 233;
pub const ARM64_REG_V6: arm64_reg = 234;
pub const ARM64_REG_V7: arm64_reg = 235;
pub const ARM64_REG_V8: arm64_reg = 236;
pub const ARM64_REG_V9: arm64_reg = 237;
pub const ARM64_REG_V10: arm64_reg = 238;
pub const ARM64_REG_V11: arm64_reg = 239;
pub const ARM64_REG_V12: arm64_reg = 240;
pub const ARM64_REG_V13: arm64_reg = 241;
pub const ARM64_REG_V14: arm64_reg = 242;
pub const ARM64_REG_V15: arm64_reg = 243;
pub const ARM64_REG_V16: arm64_reg = 244;
pub const ARM64_REG_V17: arm64_reg = 245;
pub const ARM64_REG_V18: arm64_reg = 246;
pub const ARM64_REG_V19: arm64_reg = 247;
pub const ARM64_REG_V20: arm64_reg = 248;
pub const ARM64_REG_V21: arm64_reg = 249;
pub const ARM64_REG_V22: arm64_reg = 250;
pub const ARM64_REG_V23: arm64_reg = 251;
pub const ARM64_REG_V24: arm64_reg = 252;
pub const ARM64_REG_V25: arm64_reg = 253;
pub const ARM64_REG_V26: arm64_reg = 254;
pub const ARM64_REG_V27: arm64_reg = 255;
pub const ARM64_REG_V28: arm64_reg = 256;
pub const ARM64_REG_V29: arm64_reg = 257;
pub const ARM64_REG_V30: arm64_reg = 258;
pub const ARM64_REG_V31: arm64_reg = 259;
pub const ARM64_REG_ENDING: arm64_reg = 260;
pub const ARM64_REG_IP0: arm64_reg = 215;
pub const ARM64_REG_IP1: arm64_reg = 216;
pub const ARM64_REG_FP: arm64_reg = 1;
pub const ARM64_REG_LR: arm64_reg = 2;
pub type arm64_reg = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct arm64_op_mem {
    pub base: arm64_reg,
    pub index: arm64_reg,
    pub disp: i32,
}
#[test]
fn bindgen_test_layout_arm64_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<arm64_op_mem>(),
        12usize,
        concat!("Size of: ", stringify!(arm64_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<arm64_op_mem>(),
        4usize,
        concat!("Alignment of ", stringify!(arm64_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<arm64_op_mem>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(arm64_op_mem),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<arm64_op_mem>())).index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(arm64_op_mem),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<arm64_op_mem>())).disp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(arm64_op_mem),
            "::",
            stringify!(disp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm64_op {
    pub vector_index: libc::c_int,
    pub vas: arm64_vas,
    pub vess: arm64_vess,
    pub shift: cs_arm64_op__bindgen_ty_1,
    pub ext: arm64_extender,
    pub type_: arm64_op_type,
    pub __bindgen_anon_1: cs_arm64_op__bindgen_ty_2,
    pub access: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_arm64_op__bindgen_ty_1 {
    pub type_: arm64_shifter,
    pub value: libc::c_uint,
}
#[test]
fn bindgen_test_layout_cs_arm64_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_arm64_op__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cs_arm64_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_arm64_op__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_arm64_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_1>())).type_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_1),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_1>())).value as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_1),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_arm64_op__bindgen_ty_2 {
    pub reg: arm64_reg,
    pub imm: i64,
    pub fp: f64,
    pub mem: arm64_op_mem,
    pub pstate: arm64_pstate,
    pub sys: libc::c_uint,
    pub prefetch: arm64_prefetch_op,
    pub barrier: arm64_barrier_op,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_cs_arm64_op__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<cs_arm64_op__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(cs_arm64_op__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_arm64_op__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_arm64_op__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_2>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_2),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_2>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_2),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_2>())).fp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_2),
            "::",
            stringify!(fp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_2>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_2),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_2>())).pstate as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_2),
            "::",
            stringify!(pstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_2>())).sys as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_2),
            "::",
            stringify!(sys)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_2>())).prefetch as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_2),
            "::",
            stringify!(prefetch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_arm64_op__bindgen_ty_2>())).barrier as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op__bindgen_ty_2),
            "::",
            stringify!(barrier)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_arm64_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_arm64_op>(),
        56usize,
        concat!("Size of: ", stringify!(cs_arm64_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_arm64_op>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_arm64_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op>())).vector_index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op),
            "::",
            stringify!(vector_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op>())).vas as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op),
            "::",
            stringify!(vas)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op>())).vess as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op),
            "::",
            stringify!(vess)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op>())).shift as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op),
            "::",
            stringify!(shift)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op>())).ext as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op>())).type_ as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64_op>())).access as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64_op),
            "::",
            stringify!(access)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_arm64 {
    pub cc: arm64_cc,
    pub update_flags: bool,
    pub writeback: bool,
    pub op_count: u8,
    pub operands: [cs_arm64_op; 8usize],
}
#[test]
fn bindgen_test_layout_cs_arm64() {
    assert_eq!(
        ::core::mem::size_of::<cs_arm64>(),
        456usize,
        concat!("Size of: ", stringify!(cs_arm64))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_arm64>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_arm64))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64>())).cc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64>())).update_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64),
            "::",
            stringify!(update_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64>())).writeback as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64),
            "::",
            stringify!(writeback)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64>())).op_count as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_arm64>())).operands as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_arm64),
            "::",
            stringify!(operands)
        )
    );
}
pub const M68K_REG_INVALID: m68k_reg = 0;
pub const M68K_REG_D0: m68k_reg = 1;
pub const M68K_REG_D1: m68k_reg = 2;
pub const M68K_REG_D2: m68k_reg = 3;
pub const M68K_REG_D3: m68k_reg = 4;
pub const M68K_REG_D4: m68k_reg = 5;
pub const M68K_REG_D5: m68k_reg = 6;
pub const M68K_REG_D6: m68k_reg = 7;
pub const M68K_REG_D7: m68k_reg = 8;
pub const M68K_REG_A0: m68k_reg = 9;
pub const M68K_REG_A1: m68k_reg = 10;
pub const M68K_REG_A2: m68k_reg = 11;
pub const M68K_REG_A3: m68k_reg = 12;
pub const M68K_REG_A4: m68k_reg = 13;
pub const M68K_REG_A5: m68k_reg = 14;
pub const M68K_REG_A6: m68k_reg = 15;
pub const M68K_REG_A7: m68k_reg = 16;
pub const M68K_REG_FP0: m68k_reg = 17;
pub const M68K_REG_FP1: m68k_reg = 18;
pub const M68K_REG_FP2: m68k_reg = 19;
pub const M68K_REG_FP3: m68k_reg = 20;
pub const M68K_REG_FP4: m68k_reg = 21;
pub const M68K_REG_FP5: m68k_reg = 22;
pub const M68K_REG_FP6: m68k_reg = 23;
pub const M68K_REG_FP7: m68k_reg = 24;
pub const M68K_REG_PC: m68k_reg = 25;
pub const M68K_REG_SR: m68k_reg = 26;
pub const M68K_REG_CCR: m68k_reg = 27;
pub const M68K_REG_SFC: m68k_reg = 28;
pub const M68K_REG_DFC: m68k_reg = 29;
pub const M68K_REG_USP: m68k_reg = 30;
pub const M68K_REG_VBR: m68k_reg = 31;
pub const M68K_REG_CACR: m68k_reg = 32;
pub const M68K_REG_CAAR: m68k_reg = 33;
pub const M68K_REG_MSP: m68k_reg = 34;
pub const M68K_REG_ISP: m68k_reg = 35;
pub const M68K_REG_TC: m68k_reg = 36;
pub const M68K_REG_ITT0: m68k_reg = 37;
pub const M68K_REG_ITT1: m68k_reg = 38;
pub const M68K_REG_DTT0: m68k_reg = 39;
pub const M68K_REG_DTT1: m68k_reg = 40;
pub const M68K_REG_MMUSR: m68k_reg = 41;
pub const M68K_REG_URP: m68k_reg = 42;
pub const M68K_REG_SRP: m68k_reg = 43;
pub const M68K_REG_FPCR: m68k_reg = 44;
pub const M68K_REG_FPSR: m68k_reg = 45;
pub const M68K_REG_FPIAR: m68k_reg = 46;
pub const M68K_REG_ENDING: m68k_reg = 47;
pub type m68k_reg = libc::c_uint;
pub const M68K_AM_NONE: m68k_address_mode = 0;
pub const M68K_AM_REG_DIRECT_DATA: m68k_address_mode = 1;
pub const M68K_AM_REG_DIRECT_ADDR: m68k_address_mode = 2;
pub const M68K_AM_REGI_ADDR: m68k_address_mode = 3;
pub const M68K_AM_REGI_ADDR_POST_INC: m68k_address_mode = 4;
pub const M68K_AM_REGI_ADDR_PRE_DEC: m68k_address_mode = 5;
pub const M68K_AM_REGI_ADDR_DISP: m68k_address_mode = 6;
pub const M68K_AM_AREGI_INDEX_8_BIT_DISP: m68k_address_mode = 7;
pub const M68K_AM_AREGI_INDEX_BASE_DISP: m68k_address_mode = 8;
pub const M68K_AM_MEMI_POST_INDEX: m68k_address_mode = 9;
pub const M68K_AM_MEMI_PRE_INDEX: m68k_address_mode = 10;
pub const M68K_AM_PCI_DISP: m68k_address_mode = 11;
pub const M68K_AM_PCI_INDEX_8_BIT_DISP: m68k_address_mode = 12;
pub const M68K_AM_PCI_INDEX_BASE_DISP: m68k_address_mode = 13;
pub const M68K_AM_PC_MEMI_POST_INDEX: m68k_address_mode = 14;
pub const M68K_AM_PC_MEMI_PRE_INDEX: m68k_address_mode = 15;
pub const M68K_AM_ABSOLUTE_DATA_SHORT: m68k_address_mode = 16;
pub const M68K_AM_ABSOLUTE_DATA_LONG: m68k_address_mode = 17;
pub const M68K_AM_IMMEDIATE: m68k_address_mode = 18;
pub const M68K_AM_BRANCH_DISPLACEMENT: m68k_address_mode = 19;
pub type m68k_address_mode = libc::c_uint;
pub const M68K_OP_INVALID: m68k_op_type = 0;
pub const M68K_OP_REG: m68k_op_type = 1;
pub const M68K_OP_IMM: m68k_op_type = 2;
pub const M68K_OP_MEM: m68k_op_type = 3;
pub const M68K_OP_FP_SINGLE: m68k_op_type = 4;
pub const M68K_OP_FP_DOUBLE: m68k_op_type = 5;
pub const M68K_OP_REG_BITS: m68k_op_type = 6;
pub const M68K_OP_REG_PAIR: m68k_op_type = 7;
pub const M68K_OP_BR_DISP: m68k_op_type = 8;
pub type m68k_op_type = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m68k_op_mem {
    pub base_reg: m68k_reg,
    pub index_reg: m68k_reg,
    pub in_base_reg: m68k_reg,
    pub in_disp: u32,
    pub out_disp: u32,
    pub disp: i16,
    pub scale: u8,
    pub bitfield: u8,
    pub width: u8,
    pub offset: u8,
    pub index_size: u8,
}
#[test]
fn bindgen_test_layout_m68k_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<m68k_op_mem>(),
        28usize,
        concat!("Size of: ", stringify!(m68k_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<m68k_op_mem>(),
        4usize,
        concat!("Alignment of ", stringify!(m68k_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).base_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(base_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).index_reg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(index_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).in_base_reg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(in_base_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).in_disp as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(in_disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).out_disp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(out_disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).disp as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).scale as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).bitfield as *const _ as usize },
        23usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(bitfield)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).width as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).offset as *const _ as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_mem>())).index_size as *const _ as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_mem),
            "::",
            stringify!(index_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m68k_op_br_disp {
    pub disp: i32,
    pub disp_size: u8,
}
#[test]
fn bindgen_test_layout_m68k_op_br_disp() {
    assert_eq!(
        ::core::mem::size_of::<m68k_op_br_disp>(),
        8usize,
        concat!("Size of: ", stringify!(m68k_op_br_disp))
    );
    assert_eq!(
        ::core::mem::align_of::<m68k_op_br_disp>(),
        4usize,
        concat!("Alignment of ", stringify!(m68k_op_br_disp))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_br_disp>())).disp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_br_disp),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_br_disp>())).disp_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_br_disp),
            "::",
            stringify!(disp_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_m68k_op_reg_pair {
    pub reg_0: m68k_reg,
    pub reg_1: m68k_reg,
}
#[test]
fn bindgen_test_layout_cs_m68k_op_reg_pair() {
    assert_eq!(
        ::core::mem::size_of::<cs_m68k_op_reg_pair>(),
        8usize,
        concat!("Size of: ", stringify!(cs_m68k_op_reg_pair))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_m68k_op_reg_pair>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_m68k_op_reg_pair))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op_reg_pair>())).reg_0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op_reg_pair),
            "::",
            stringify!(reg_0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op_reg_pair>())).reg_1 as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op_reg_pair),
            "::",
            stringify!(reg_1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m68k_op {
    pub __bindgen_anon_1: cs_m68k_op__bindgen_ty_1,
    pub mem: m68k_op_mem,
    pub br_disp: m68k_op_br_disp,
    pub register_bits: u32,
    pub type_: m68k_op_type,
    pub address_mode: m68k_address_mode,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_m68k_op__bindgen_ty_1 {
    pub imm: u64,
    pub dimm: f64,
    pub simm: f32,
    pub reg: m68k_reg,
    pub reg_pair: cs_m68k_op_reg_pair,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cs_m68k_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_m68k_op__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cs_m68k_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_m68k_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_m68k_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op__bindgen_ty_1>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op__bindgen_ty_1>())).dimm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op__bindgen_ty_1),
            "::",
            stringify!(dimm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op__bindgen_ty_1>())).simm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op__bindgen_ty_1),
            "::",
            stringify!(simm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op__bindgen_ty_1>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_m68k_op__bindgen_ty_1>())).reg_pair as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op__bindgen_ty_1),
            "::",
            stringify!(reg_pair)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_m68k_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_m68k_op>(),
        56usize,
        concat!("Size of: ", stringify!(cs_m68k_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_m68k_op>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_m68k_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op>())).mem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op>())).br_disp as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op),
            "::",
            stringify!(br_disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op>())).register_bits as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op),
            "::",
            stringify!(register_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op>())).type_ as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k_op>())).address_mode as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k_op),
            "::",
            stringify!(address_mode)
        )
    );
}
pub const M68K_CPU_SIZE_NONE: m68k_cpu_size = 0;
pub const M68K_CPU_SIZE_BYTE: m68k_cpu_size = 1;
pub const M68K_CPU_SIZE_WORD: m68k_cpu_size = 2;
pub const M68K_CPU_SIZE_LONG: m68k_cpu_size = 4;
pub type m68k_cpu_size = libc::c_uint;
pub const M68K_FPU_SIZE_NONE: m68k_fpu_size = 0;
pub const M68K_FPU_SIZE_SINGLE: m68k_fpu_size = 4;
pub const M68K_FPU_SIZE_DOUBLE: m68k_fpu_size = 8;
pub const M68K_FPU_SIZE_EXTENDED: m68k_fpu_size = 12;
pub type m68k_fpu_size = libc::c_uint;
pub const M68K_SIZE_TYPE_INVALID: m68k_size_type = 0;
pub const M68K_SIZE_TYPE_CPU: m68k_size_type = 1;
pub const M68K_SIZE_TYPE_FPU: m68k_size_type = 2;
pub type m68k_size_type = libc::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct m68k_op_size {
    pub type_: m68k_size_type,
    pub __bindgen_anon_1: m68k_op_size__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union m68k_op_size__bindgen_ty_1 {
    pub cpu_size: m68k_cpu_size,
    pub fpu_size: m68k_fpu_size,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_m68k_op_size__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<m68k_op_size__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(m68k_op_size__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<m68k_op_size__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(m68k_op_size__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<m68k_op_size__bindgen_ty_1>())).cpu_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_size__bindgen_ty_1),
            "::",
            stringify!(cpu_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<m68k_op_size__bindgen_ty_1>())).fpu_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_size__bindgen_ty_1),
            "::",
            stringify!(fpu_size)
        )
    );
}
#[test]
fn bindgen_test_layout_m68k_op_size() {
    assert_eq!(
        ::core::mem::size_of::<m68k_op_size>(),
        8usize,
        concat!("Size of: ", stringify!(m68k_op_size))
    );
    assert_eq!(
        ::core::mem::align_of::<m68k_op_size>(),
        4usize,
        concat!("Alignment of ", stringify!(m68k_op_size))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m68k_op_size>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m68k_op_size),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m68k {
    pub operands: [cs_m68k_op; 4usize],
    pub op_size: m68k_op_size,
    pub op_count: u8,
}
#[test]
fn bindgen_test_layout_cs_m68k() {
    assert_eq!(
        ::core::mem::size_of::<cs_m68k>(),
        240usize,
        concat!("Size of: ", stringify!(cs_m68k))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_m68k>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_m68k))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k>())).operands as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k>())).op_size as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k),
            "::",
            stringify!(op_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m68k>())).op_count as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m68k),
            "::",
            stringify!(op_count)
        )
    );
}
pub const MIPS_OP_INVALID: mips_op_type = 0;
pub const MIPS_OP_REG: mips_op_type = 1;
pub const MIPS_OP_IMM: mips_op_type = 2;
pub const MIPS_OP_MEM: mips_op_type = 3;
pub type mips_op_type = libc::c_uint;
pub const MIPS_REG_INVALID: mips_reg = 0;
pub const MIPS_REG_PC: mips_reg = 1;
pub const MIPS_REG_0: mips_reg = 2;
pub const MIPS_REG_1: mips_reg = 3;
pub const MIPS_REG_2: mips_reg = 4;
pub const MIPS_REG_3: mips_reg = 5;
pub const MIPS_REG_4: mips_reg = 6;
pub const MIPS_REG_5: mips_reg = 7;
pub const MIPS_REG_6: mips_reg = 8;
pub const MIPS_REG_7: mips_reg = 9;
pub const MIPS_REG_8: mips_reg = 10;
pub const MIPS_REG_9: mips_reg = 11;
pub const MIPS_REG_10: mips_reg = 12;
pub const MIPS_REG_11: mips_reg = 13;
pub const MIPS_REG_12: mips_reg = 14;
pub const MIPS_REG_13: mips_reg = 15;
pub const MIPS_REG_14: mips_reg = 16;
pub const MIPS_REG_15: mips_reg = 17;
pub const MIPS_REG_16: mips_reg = 18;
pub const MIPS_REG_17: mips_reg = 19;
pub const MIPS_REG_18: mips_reg = 20;
pub const MIPS_REG_19: mips_reg = 21;
pub const MIPS_REG_20: mips_reg = 22;
pub const MIPS_REG_21: mips_reg = 23;
pub const MIPS_REG_22: mips_reg = 24;
pub const MIPS_REG_23: mips_reg = 25;
pub const MIPS_REG_24: mips_reg = 26;
pub const MIPS_REG_25: mips_reg = 27;
pub const MIPS_REG_26: mips_reg = 28;
pub const MIPS_REG_27: mips_reg = 29;
pub const MIPS_REG_28: mips_reg = 30;
pub const MIPS_REG_29: mips_reg = 31;
pub const MIPS_REG_30: mips_reg = 32;
pub const MIPS_REG_31: mips_reg = 33;
pub const MIPS_REG_DSPCCOND: mips_reg = 34;
pub const MIPS_REG_DSPCARRY: mips_reg = 35;
pub const MIPS_REG_DSPEFI: mips_reg = 36;
pub const MIPS_REG_DSPOUTFLAG: mips_reg = 37;
pub const MIPS_REG_DSPOUTFLAG16_19: mips_reg = 38;
pub const MIPS_REG_DSPOUTFLAG20: mips_reg = 39;
pub const MIPS_REG_DSPOUTFLAG21: mips_reg = 40;
pub const MIPS_REG_DSPOUTFLAG22: mips_reg = 41;
pub const MIPS_REG_DSPOUTFLAG23: mips_reg = 42;
pub const MIPS_REG_DSPPOS: mips_reg = 43;
pub const MIPS_REG_DSPSCOUNT: mips_reg = 44;
pub const MIPS_REG_AC0: mips_reg = 45;
pub const MIPS_REG_AC1: mips_reg = 46;
pub const MIPS_REG_AC2: mips_reg = 47;
pub const MIPS_REG_AC3: mips_reg = 48;
pub const MIPS_REG_CC0: mips_reg = 49;
pub const MIPS_REG_CC1: mips_reg = 50;
pub const MIPS_REG_CC2: mips_reg = 51;
pub const MIPS_REG_CC3: mips_reg = 52;
pub const MIPS_REG_CC4: mips_reg = 53;
pub const MIPS_REG_CC5: mips_reg = 54;
pub const MIPS_REG_CC6: mips_reg = 55;
pub const MIPS_REG_CC7: mips_reg = 56;
pub const MIPS_REG_F0: mips_reg = 57;
pub const MIPS_REG_F1: mips_reg = 58;
pub const MIPS_REG_F2: mips_reg = 59;
pub const MIPS_REG_F3: mips_reg = 60;
pub const MIPS_REG_F4: mips_reg = 61;
pub const MIPS_REG_F5: mips_reg = 62;
pub const MIPS_REG_F6: mips_reg = 63;
pub const MIPS_REG_F7: mips_reg = 64;
pub const MIPS_REG_F8: mips_reg = 65;
pub const MIPS_REG_F9: mips_reg = 66;
pub const MIPS_REG_F10: mips_reg = 67;
pub const MIPS_REG_F11: mips_reg = 68;
pub const MIPS_REG_F12: mips_reg = 69;
pub const MIPS_REG_F13: mips_reg = 70;
pub const MIPS_REG_F14: mips_reg = 71;
pub const MIPS_REG_F15: mips_reg = 72;
pub const MIPS_REG_F16: mips_reg = 73;
pub const MIPS_REG_F17: mips_reg = 74;
pub const MIPS_REG_F18: mips_reg = 75;
pub const MIPS_REG_F19: mips_reg = 76;
pub const MIPS_REG_F20: mips_reg = 77;
pub const MIPS_REG_F21: mips_reg = 78;
pub const MIPS_REG_F22: mips_reg = 79;
pub const MIPS_REG_F23: mips_reg = 80;
pub const MIPS_REG_F24: mips_reg = 81;
pub const MIPS_REG_F25: mips_reg = 82;
pub const MIPS_REG_F26: mips_reg = 83;
pub const MIPS_REG_F27: mips_reg = 84;
pub const MIPS_REG_F28: mips_reg = 85;
pub const MIPS_REG_F29: mips_reg = 86;
pub const MIPS_REG_F30: mips_reg = 87;
pub const MIPS_REG_F31: mips_reg = 88;
pub const MIPS_REG_FCC0: mips_reg = 89;
pub const MIPS_REG_FCC1: mips_reg = 90;
pub const MIPS_REG_FCC2: mips_reg = 91;
pub const MIPS_REG_FCC3: mips_reg = 92;
pub const MIPS_REG_FCC4: mips_reg = 93;
pub const MIPS_REG_FCC5: mips_reg = 94;
pub const MIPS_REG_FCC6: mips_reg = 95;
pub const MIPS_REG_FCC7: mips_reg = 96;
pub const MIPS_REG_W0: mips_reg = 97;
pub const MIPS_REG_W1: mips_reg = 98;
pub const MIPS_REG_W2: mips_reg = 99;
pub const MIPS_REG_W3: mips_reg = 100;
pub const MIPS_REG_W4: mips_reg = 101;
pub const MIPS_REG_W5: mips_reg = 102;
pub const MIPS_REG_W6: mips_reg = 103;
pub const MIPS_REG_W7: mips_reg = 104;
pub const MIPS_REG_W8: mips_reg = 105;
pub const MIPS_REG_W9: mips_reg = 106;
pub const MIPS_REG_W10: mips_reg = 107;
pub const MIPS_REG_W11: mips_reg = 108;
pub const MIPS_REG_W12: mips_reg = 109;
pub const MIPS_REG_W13: mips_reg = 110;
pub const MIPS_REG_W14: mips_reg = 111;
pub const MIPS_REG_W15: mips_reg = 112;
pub const MIPS_REG_W16: mips_reg = 113;
pub const MIPS_REG_W17: mips_reg = 114;
pub const MIPS_REG_W18: mips_reg = 115;
pub const MIPS_REG_W19: mips_reg = 116;
pub const MIPS_REG_W20: mips_reg = 117;
pub const MIPS_REG_W21: mips_reg = 118;
pub const MIPS_REG_W22: mips_reg = 119;
pub const MIPS_REG_W23: mips_reg = 120;
pub const MIPS_REG_W24: mips_reg = 121;
pub const MIPS_REG_W25: mips_reg = 122;
pub const MIPS_REG_W26: mips_reg = 123;
pub const MIPS_REG_W27: mips_reg = 124;
pub const MIPS_REG_W28: mips_reg = 125;
pub const MIPS_REG_W29: mips_reg = 126;
pub const MIPS_REG_W30: mips_reg = 127;
pub const MIPS_REG_W31: mips_reg = 128;
pub const MIPS_REG_HI: mips_reg = 129;
pub const MIPS_REG_LO: mips_reg = 130;
pub const MIPS_REG_P0: mips_reg = 131;
pub const MIPS_REG_P1: mips_reg = 132;
pub const MIPS_REG_P2: mips_reg = 133;
pub const MIPS_REG_MPL0: mips_reg = 134;
pub const MIPS_REG_MPL1: mips_reg = 135;
pub const MIPS_REG_MPL2: mips_reg = 136;
pub const MIPS_REG_ENDING: mips_reg = 137;
pub const MIPS_REG_ZERO: mips_reg = 2;
pub const MIPS_REG_AT: mips_reg = 3;
pub const MIPS_REG_V0: mips_reg = 4;
pub const MIPS_REG_V1: mips_reg = 5;
pub const MIPS_REG_A0: mips_reg = 6;
pub const MIPS_REG_A1: mips_reg = 7;
pub const MIPS_REG_A2: mips_reg = 8;
pub const MIPS_REG_A3: mips_reg = 9;
pub const MIPS_REG_T0: mips_reg = 10;
pub const MIPS_REG_T1: mips_reg = 11;
pub const MIPS_REG_T2: mips_reg = 12;
pub const MIPS_REG_T3: mips_reg = 13;
pub const MIPS_REG_T4: mips_reg = 14;
pub const MIPS_REG_T5: mips_reg = 15;
pub const MIPS_REG_T6: mips_reg = 16;
pub const MIPS_REG_T7: mips_reg = 17;
pub const MIPS_REG_S0: mips_reg = 18;
pub const MIPS_REG_S1: mips_reg = 19;
pub const MIPS_REG_S2: mips_reg = 20;
pub const MIPS_REG_S3: mips_reg = 21;
pub const MIPS_REG_S4: mips_reg = 22;
pub const MIPS_REG_S5: mips_reg = 23;
pub const MIPS_REG_S6: mips_reg = 24;
pub const MIPS_REG_S7: mips_reg = 25;
pub const MIPS_REG_T8: mips_reg = 26;
pub const MIPS_REG_T9: mips_reg = 27;
pub const MIPS_REG_K0: mips_reg = 28;
pub const MIPS_REG_K1: mips_reg = 29;
pub const MIPS_REG_GP: mips_reg = 30;
pub const MIPS_REG_SP: mips_reg = 31;
pub const MIPS_REG_FP: mips_reg = 32;
pub const MIPS_REG_S8: mips_reg = 32;
pub const MIPS_REG_RA: mips_reg = 33;
pub const MIPS_REG_HI0: mips_reg = 45;
pub const MIPS_REG_HI1: mips_reg = 46;
pub const MIPS_REG_HI2: mips_reg = 47;
pub const MIPS_REG_HI3: mips_reg = 48;
pub const MIPS_REG_LO0: mips_reg = 45;
pub const MIPS_REG_LO1: mips_reg = 46;
pub const MIPS_REG_LO2: mips_reg = 47;
pub const MIPS_REG_LO3: mips_reg = 48;
pub type mips_reg = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mips_op_mem {
    pub base: mips_reg,
    pub disp: i64,
}
#[test]
fn bindgen_test_layout_mips_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<mips_op_mem>(),
        16usize,
        concat!("Size of: ", stringify!(mips_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<mips_op_mem>(),
        8usize,
        concat!("Alignment of ", stringify!(mips_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mips_op_mem>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mips_op_mem),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<mips_op_mem>())).disp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mips_op_mem),
            "::",
            stringify!(disp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mips_op {
    pub type_: mips_op_type,
    pub __bindgen_anon_1: cs_mips_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_mips_op__bindgen_ty_1 {
    pub reg: mips_reg,
    pub imm: i64,
    pub mem: mips_op_mem,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_cs_mips_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_mips_op__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cs_mips_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_mips_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_mips_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mips_op__bindgen_ty_1>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mips_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mips_op__bindgen_ty_1>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mips_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mips_op__bindgen_ty_1>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mips_op__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_mips_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_mips_op>(),
        24usize,
        concat!("Size of: ", stringify!(cs_mips_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_mips_op>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_mips_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mips_op>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mips_op),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mips {
    pub op_count: u8,
    pub operands: [cs_mips_op; 10usize],
}
#[test]
fn bindgen_test_layout_cs_mips() {
    assert_eq!(
        ::core::mem::size_of::<cs_mips>(),
        248usize,
        concat!("Size of: ", stringify!(cs_mips))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_mips>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_mips))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mips>())).op_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mips),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mips>())).operands as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mips),
            "::",
            stringify!(operands)
        )
    );
}
pub const PPC_BC_INVALID: ppc_bc = 0;
pub const PPC_BC_LT: ppc_bc = 12;
pub const PPC_BC_LE: ppc_bc = 36;
pub const PPC_BC_EQ: ppc_bc = 76;
pub const PPC_BC_GE: ppc_bc = 4;
pub const PPC_BC_GT: ppc_bc = 44;
pub const PPC_BC_NE: ppc_bc = 68;
pub const PPC_BC_UN: ppc_bc = 108;
pub const PPC_BC_NU: ppc_bc = 100;
pub const PPC_BC_SO: ppc_bc = 140;
pub const PPC_BC_NS: ppc_bc = 132;
pub type ppc_bc = libc::c_uint;
pub const PPC_BH_INVALID: ppc_bh = 0;
pub const PPC_BH_PLUS: ppc_bh = 1;
pub const PPC_BH_MINUS: ppc_bh = 2;
pub type ppc_bh = libc::c_uint;
pub const PPC_OP_INVALID: ppc_op_type = 0;
pub const PPC_OP_REG: ppc_op_type = 1;
pub const PPC_OP_IMM: ppc_op_type = 2;
pub const PPC_OP_MEM: ppc_op_type = 3;
pub const PPC_OP_CRX: ppc_op_type = 64;
pub type ppc_op_type = libc::c_uint;
pub const PPC_REG_INVALID: ppc_reg = 0;
pub const PPC_REG_CARRY: ppc_reg = 1;
pub const PPC_REG_CR0: ppc_reg = 2;
pub const PPC_REG_CR1: ppc_reg = 3;
pub const PPC_REG_CR2: ppc_reg = 4;
pub const PPC_REG_CR3: ppc_reg = 5;
pub const PPC_REG_CR4: ppc_reg = 6;
pub const PPC_REG_CR5: ppc_reg = 7;
pub const PPC_REG_CR6: ppc_reg = 8;
pub const PPC_REG_CR7: ppc_reg = 9;
pub const PPC_REG_CTR: ppc_reg = 10;
pub const PPC_REG_F0: ppc_reg = 11;
pub const PPC_REG_F1: ppc_reg = 12;
pub const PPC_REG_F2: ppc_reg = 13;
pub const PPC_REG_F3: ppc_reg = 14;
pub const PPC_REG_F4: ppc_reg = 15;
pub const PPC_REG_F5: ppc_reg = 16;
pub const PPC_REG_F6: ppc_reg = 17;
pub const PPC_REG_F7: ppc_reg = 18;
pub const PPC_REG_F8: ppc_reg = 19;
pub const PPC_REG_F9: ppc_reg = 20;
pub const PPC_REG_F10: ppc_reg = 21;
pub const PPC_REG_F11: ppc_reg = 22;
pub const PPC_REG_F12: ppc_reg = 23;
pub const PPC_REG_F13: ppc_reg = 24;
pub const PPC_REG_F14: ppc_reg = 25;
pub const PPC_REG_F15: ppc_reg = 26;
pub const PPC_REG_F16: ppc_reg = 27;
pub const PPC_REG_F17: ppc_reg = 28;
pub const PPC_REG_F18: ppc_reg = 29;
pub const PPC_REG_F19: ppc_reg = 30;
pub const PPC_REG_F20: ppc_reg = 31;
pub const PPC_REG_F21: ppc_reg = 32;
pub const PPC_REG_F22: ppc_reg = 33;
pub const PPC_REG_F23: ppc_reg = 34;
pub const PPC_REG_F24: ppc_reg = 35;
pub const PPC_REG_F25: ppc_reg = 36;
pub const PPC_REG_F26: ppc_reg = 37;
pub const PPC_REG_F27: ppc_reg = 38;
pub const PPC_REG_F28: ppc_reg = 39;
pub const PPC_REG_F29: ppc_reg = 40;
pub const PPC_REG_F30: ppc_reg = 41;
pub const PPC_REG_F31: ppc_reg = 42;
pub const PPC_REG_LR: ppc_reg = 43;
pub const PPC_REG_R0: ppc_reg = 44;
pub const PPC_REG_R1: ppc_reg = 45;
pub const PPC_REG_R2: ppc_reg = 46;
pub const PPC_REG_R3: ppc_reg = 47;
pub const PPC_REG_R4: ppc_reg = 48;
pub const PPC_REG_R5: ppc_reg = 49;
pub const PPC_REG_R6: ppc_reg = 50;
pub const PPC_REG_R7: ppc_reg = 51;
pub const PPC_REG_R8: ppc_reg = 52;
pub const PPC_REG_R9: ppc_reg = 53;
pub const PPC_REG_R10: ppc_reg = 54;
pub const PPC_REG_R11: ppc_reg = 55;
pub const PPC_REG_R12: ppc_reg = 56;
pub const PPC_REG_R13: ppc_reg = 57;
pub const PPC_REG_R14: ppc_reg = 58;
pub const PPC_REG_R15: ppc_reg = 59;
pub const PPC_REG_R16: ppc_reg = 60;
pub const PPC_REG_R17: ppc_reg = 61;
pub const PPC_REG_R18: ppc_reg = 62;
pub const PPC_REG_R19: ppc_reg = 63;
pub const PPC_REG_R20: ppc_reg = 64;
pub const PPC_REG_R21: ppc_reg = 65;
pub const PPC_REG_R22: ppc_reg = 66;
pub const PPC_REG_R23: ppc_reg = 67;
pub const PPC_REG_R24: ppc_reg = 68;
pub const PPC_REG_R25: ppc_reg = 69;
pub const PPC_REG_R26: ppc_reg = 70;
pub const PPC_REG_R27: ppc_reg = 71;
pub const PPC_REG_R28: ppc_reg = 72;
pub const PPC_REG_R29: ppc_reg = 73;
pub const PPC_REG_R30: ppc_reg = 74;
pub const PPC_REG_R31: ppc_reg = 75;
pub const PPC_REG_V0: ppc_reg = 76;
pub const PPC_REG_V1: ppc_reg = 77;
pub const PPC_REG_V2: ppc_reg = 78;
pub const PPC_REG_V3: ppc_reg = 79;
pub const PPC_REG_V4: ppc_reg = 80;
pub const PPC_REG_V5: ppc_reg = 81;
pub const PPC_REG_V6: ppc_reg = 82;
pub const PPC_REG_V7: ppc_reg = 83;
pub const PPC_REG_V8: ppc_reg = 84;
pub const PPC_REG_V9: ppc_reg = 85;
pub const PPC_REG_V10: ppc_reg = 86;
pub const PPC_REG_V11: ppc_reg = 87;
pub const PPC_REG_V12: ppc_reg = 88;
pub const PPC_REG_V13: ppc_reg = 89;
pub const PPC_REG_V14: ppc_reg = 90;
pub const PPC_REG_V15: ppc_reg = 91;
pub const PPC_REG_V16: ppc_reg = 92;
pub const PPC_REG_V17: ppc_reg = 93;
pub const PPC_REG_V18: ppc_reg = 94;
pub const PPC_REG_V19: ppc_reg = 95;
pub const PPC_REG_V20: ppc_reg = 96;
pub const PPC_REG_V21: ppc_reg = 97;
pub const PPC_REG_V22: ppc_reg = 98;
pub const PPC_REG_V23: ppc_reg = 99;
pub const PPC_REG_V24: ppc_reg = 100;
pub const PPC_REG_V25: ppc_reg = 101;
pub const PPC_REG_V26: ppc_reg = 102;
pub const PPC_REG_V27: ppc_reg = 103;
pub const PPC_REG_V28: ppc_reg = 104;
pub const PPC_REG_V29: ppc_reg = 105;
pub const PPC_REG_V30: ppc_reg = 106;
pub const PPC_REG_V31: ppc_reg = 107;
pub const PPC_REG_VRSAVE: ppc_reg = 108;
pub const PPC_REG_VS0: ppc_reg = 109;
pub const PPC_REG_VS1: ppc_reg = 110;
pub const PPC_REG_VS2: ppc_reg = 111;
pub const PPC_REG_VS3: ppc_reg = 112;
pub const PPC_REG_VS4: ppc_reg = 113;
pub const PPC_REG_VS5: ppc_reg = 114;
pub const PPC_REG_VS6: ppc_reg = 115;
pub const PPC_REG_VS7: ppc_reg = 116;
pub const PPC_REG_VS8: ppc_reg = 117;
pub const PPC_REG_VS9: ppc_reg = 118;
pub const PPC_REG_VS10: ppc_reg = 119;
pub const PPC_REG_VS11: ppc_reg = 120;
pub const PPC_REG_VS12: ppc_reg = 121;
pub const PPC_REG_VS13: ppc_reg = 122;
pub const PPC_REG_VS14: ppc_reg = 123;
pub const PPC_REG_VS15: ppc_reg = 124;
pub const PPC_REG_VS16: ppc_reg = 125;
pub const PPC_REG_VS17: ppc_reg = 126;
pub const PPC_REG_VS18: ppc_reg = 127;
pub const PPC_REG_VS19: ppc_reg = 128;
pub const PPC_REG_VS20: ppc_reg = 129;
pub const PPC_REG_VS21: ppc_reg = 130;
pub const PPC_REG_VS22: ppc_reg = 131;
pub const PPC_REG_VS23: ppc_reg = 132;
pub const PPC_REG_VS24: ppc_reg = 133;
pub const PPC_REG_VS25: ppc_reg = 134;
pub const PPC_REG_VS26: ppc_reg = 135;
pub const PPC_REG_VS27: ppc_reg = 136;
pub const PPC_REG_VS28: ppc_reg = 137;
pub const PPC_REG_VS29: ppc_reg = 138;
pub const PPC_REG_VS30: ppc_reg = 139;
pub const PPC_REG_VS31: ppc_reg = 140;
pub const PPC_REG_VS32: ppc_reg = 141;
pub const PPC_REG_VS33: ppc_reg = 142;
pub const PPC_REG_VS34: ppc_reg = 143;
pub const PPC_REG_VS35: ppc_reg = 144;
pub const PPC_REG_VS36: ppc_reg = 145;
pub const PPC_REG_VS37: ppc_reg = 146;
pub const PPC_REG_VS38: ppc_reg = 147;
pub const PPC_REG_VS39: ppc_reg = 148;
pub const PPC_REG_VS40: ppc_reg = 149;
pub const PPC_REG_VS41: ppc_reg = 150;
pub const PPC_REG_VS42: ppc_reg = 151;
pub const PPC_REG_VS43: ppc_reg = 152;
pub const PPC_REG_VS44: ppc_reg = 153;
pub const PPC_REG_VS45: ppc_reg = 154;
pub const PPC_REG_VS46: ppc_reg = 155;
pub const PPC_REG_VS47: ppc_reg = 156;
pub const PPC_REG_VS48: ppc_reg = 157;
pub const PPC_REG_VS49: ppc_reg = 158;
pub const PPC_REG_VS50: ppc_reg = 159;
pub const PPC_REG_VS51: ppc_reg = 160;
pub const PPC_REG_VS52: ppc_reg = 161;
pub const PPC_REG_VS53: ppc_reg = 162;
pub const PPC_REG_VS54: ppc_reg = 163;
pub const PPC_REG_VS55: ppc_reg = 164;
pub const PPC_REG_VS56: ppc_reg = 165;
pub const PPC_REG_VS57: ppc_reg = 166;
pub const PPC_REG_VS58: ppc_reg = 167;
pub const PPC_REG_VS59: ppc_reg = 168;
pub const PPC_REG_VS60: ppc_reg = 169;
pub const PPC_REG_VS61: ppc_reg = 170;
pub const PPC_REG_VS62: ppc_reg = 171;
pub const PPC_REG_VS63: ppc_reg = 172;
pub const PPC_REG_Q0: ppc_reg = 173;
pub const PPC_REG_Q1: ppc_reg = 174;
pub const PPC_REG_Q2: ppc_reg = 175;
pub const PPC_REG_Q3: ppc_reg = 176;
pub const PPC_REG_Q4: ppc_reg = 177;
pub const PPC_REG_Q5: ppc_reg = 178;
pub const PPC_REG_Q6: ppc_reg = 179;
pub const PPC_REG_Q7: ppc_reg = 180;
pub const PPC_REG_Q8: ppc_reg = 181;
pub const PPC_REG_Q9: ppc_reg = 182;
pub const PPC_REG_Q10: ppc_reg = 183;
pub const PPC_REG_Q11: ppc_reg = 184;
pub const PPC_REG_Q12: ppc_reg = 185;
pub const PPC_REG_Q13: ppc_reg = 186;
pub const PPC_REG_Q14: ppc_reg = 187;
pub const PPC_REG_Q15: ppc_reg = 188;
pub const PPC_REG_Q16: ppc_reg = 189;
pub const PPC_REG_Q17: ppc_reg = 190;
pub const PPC_REG_Q18: ppc_reg = 191;
pub const PPC_REG_Q19: ppc_reg = 192;
pub const PPC_REG_Q20: ppc_reg = 193;
pub const PPC_REG_Q21: ppc_reg = 194;
pub const PPC_REG_Q22: ppc_reg = 195;
pub const PPC_REG_Q23: ppc_reg = 196;
pub const PPC_REG_Q24: ppc_reg = 197;
pub const PPC_REG_Q25: ppc_reg = 198;
pub const PPC_REG_Q26: ppc_reg = 199;
pub const PPC_REG_Q27: ppc_reg = 200;
pub const PPC_REG_Q28: ppc_reg = 201;
pub const PPC_REG_Q29: ppc_reg = 202;
pub const PPC_REG_Q30: ppc_reg = 203;
pub const PPC_REG_Q31: ppc_reg = 204;
pub const PPC_REG_RM: ppc_reg = 205;
pub const PPC_REG_CTR8: ppc_reg = 206;
pub const PPC_REG_LR8: ppc_reg = 207;
pub const PPC_REG_CR1EQ: ppc_reg = 208;
pub const PPC_REG_X2: ppc_reg = 209;
pub const PPC_REG_ENDING: ppc_reg = 210;
pub type ppc_reg = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ppc_op_mem {
    pub base: ppc_reg,
    pub disp: i32,
}
#[test]
fn bindgen_test_layout_ppc_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<ppc_op_mem>(),
        8usize,
        concat!("Size of: ", stringify!(ppc_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<ppc_op_mem>(),
        4usize,
        concat!("Alignment of ", stringify!(ppc_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ppc_op_mem>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ppc_op_mem),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ppc_op_mem>())).disp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ppc_op_mem),
            "::",
            stringify!(disp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ppc_op_crx {
    pub scale: libc::c_uint,
    pub reg: ppc_reg,
    pub cond: ppc_bc,
}
#[test]
fn bindgen_test_layout_ppc_op_crx() {
    assert_eq!(
        ::core::mem::size_of::<ppc_op_crx>(),
        12usize,
        concat!("Size of: ", stringify!(ppc_op_crx))
    );
    assert_eq!(
        ::core::mem::align_of::<ppc_op_crx>(),
        4usize,
        concat!("Alignment of ", stringify!(ppc_op_crx))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ppc_op_crx>())).scale as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ppc_op_crx),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ppc_op_crx>())).reg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ppc_op_crx),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<ppc_op_crx>())).cond as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ppc_op_crx),
            "::",
            stringify!(cond)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_ppc_op {
    pub type_: ppc_op_type,
    pub __bindgen_anon_1: cs_ppc_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_ppc_op__bindgen_ty_1 {
    pub reg: ppc_reg,
    pub imm: i64,
    pub mem: ppc_op_mem,
    pub crx: ppc_op_crx,
    _bindgen_union_align: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_cs_ppc_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_ppc_op__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cs_ppc_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_ppc_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_ppc_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc_op__bindgen_ty_1>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc_op__bindgen_ty_1>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc_op__bindgen_ty_1>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc_op__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc_op__bindgen_ty_1>())).crx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc_op__bindgen_ty_1),
            "::",
            stringify!(crx)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_ppc_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_ppc_op>(),
        24usize,
        concat!("Size of: ", stringify!(cs_ppc_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_ppc_op>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_ppc_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc_op>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc_op),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_ppc {
    pub bc: ppc_bc,
    pub bh: ppc_bh,
    pub update_cr0: bool,
    pub op_count: u8,
    pub operands: [cs_ppc_op; 8usize],
}
#[test]
fn bindgen_test_layout_cs_ppc() {
    assert_eq!(
        ::core::mem::size_of::<cs_ppc>(),
        208usize,
        concat!("Size of: ", stringify!(cs_ppc))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_ppc>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_ppc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc>())).bc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc),
            "::",
            stringify!(bc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc>())).bh as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc),
            "::",
            stringify!(bh)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc>())).update_cr0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc),
            "::",
            stringify!(update_cr0)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc>())).op_count as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_ppc>())).operands as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_ppc),
            "::",
            stringify!(operands)
        )
    );
}
pub const SPARC_CC_INVALID: sparc_cc = 0;
pub const SPARC_CC_ICC_A: sparc_cc = 264;
pub const SPARC_CC_ICC_N: sparc_cc = 256;
pub const SPARC_CC_ICC_NE: sparc_cc = 265;
pub const SPARC_CC_ICC_E: sparc_cc = 257;
pub const SPARC_CC_ICC_G: sparc_cc = 266;
pub const SPARC_CC_ICC_LE: sparc_cc = 258;
pub const SPARC_CC_ICC_GE: sparc_cc = 267;
pub const SPARC_CC_ICC_L: sparc_cc = 259;
pub const SPARC_CC_ICC_GU: sparc_cc = 268;
pub const SPARC_CC_ICC_LEU: sparc_cc = 260;
pub const SPARC_CC_ICC_CC: sparc_cc = 269;
pub const SPARC_CC_ICC_CS: sparc_cc = 261;
pub const SPARC_CC_ICC_POS: sparc_cc = 270;
pub const SPARC_CC_ICC_NEG: sparc_cc = 262;
pub const SPARC_CC_ICC_VC: sparc_cc = 271;
pub const SPARC_CC_ICC_VS: sparc_cc = 263;
pub const SPARC_CC_FCC_A: sparc_cc = 280;
pub const SPARC_CC_FCC_N: sparc_cc = 272;
pub const SPARC_CC_FCC_U: sparc_cc = 279;
pub const SPARC_CC_FCC_G: sparc_cc = 278;
pub const SPARC_CC_FCC_UG: sparc_cc = 277;
pub const SPARC_CC_FCC_L: sparc_cc = 276;
pub const SPARC_CC_FCC_UL: sparc_cc = 275;
pub const SPARC_CC_FCC_LG: sparc_cc = 274;
pub const SPARC_CC_FCC_NE: sparc_cc = 273;
pub const SPARC_CC_FCC_E: sparc_cc = 281;
pub const SPARC_CC_FCC_UE: sparc_cc = 282;
pub const SPARC_CC_FCC_GE: sparc_cc = 283;
pub const SPARC_CC_FCC_UGE: sparc_cc = 284;
pub const SPARC_CC_FCC_LE: sparc_cc = 285;
pub const SPARC_CC_FCC_ULE: sparc_cc = 286;
pub const SPARC_CC_FCC_O: sparc_cc = 287;
pub type sparc_cc = libc::c_uint;
pub const SPARC_HINT_INVALID: sparc_hint = 0;
pub const SPARC_HINT_A: sparc_hint = 1;
pub const SPARC_HINT_PT: sparc_hint = 2;
pub const SPARC_HINT_PN: sparc_hint = 4;
pub type sparc_hint = libc::c_uint;
pub const SPARC_OP_INVALID: sparc_op_type = 0;
pub const SPARC_OP_REG: sparc_op_type = 1;
pub const SPARC_OP_IMM: sparc_op_type = 2;
pub const SPARC_OP_MEM: sparc_op_type = 3;
pub type sparc_op_type = libc::c_uint;
pub const SPARC_REG_INVALID: sparc_reg = 0;
pub const SPARC_REG_F0: sparc_reg = 1;
pub const SPARC_REG_F1: sparc_reg = 2;
pub const SPARC_REG_F2: sparc_reg = 3;
pub const SPARC_REG_F3: sparc_reg = 4;
pub const SPARC_REG_F4: sparc_reg = 5;
pub const SPARC_REG_F5: sparc_reg = 6;
pub const SPARC_REG_F6: sparc_reg = 7;
pub const SPARC_REG_F7: sparc_reg = 8;
pub const SPARC_REG_F8: sparc_reg = 9;
pub const SPARC_REG_F9: sparc_reg = 10;
pub const SPARC_REG_F10: sparc_reg = 11;
pub const SPARC_REG_F11: sparc_reg = 12;
pub const SPARC_REG_F12: sparc_reg = 13;
pub const SPARC_REG_F13: sparc_reg = 14;
pub const SPARC_REG_F14: sparc_reg = 15;
pub const SPARC_REG_F15: sparc_reg = 16;
pub const SPARC_REG_F16: sparc_reg = 17;
pub const SPARC_REG_F17: sparc_reg = 18;
pub const SPARC_REG_F18: sparc_reg = 19;
pub const SPARC_REG_F19: sparc_reg = 20;
pub const SPARC_REG_F20: sparc_reg = 21;
pub const SPARC_REG_F21: sparc_reg = 22;
pub const SPARC_REG_F22: sparc_reg = 23;
pub const SPARC_REG_F23: sparc_reg = 24;
pub const SPARC_REG_F24: sparc_reg = 25;
pub const SPARC_REG_F25: sparc_reg = 26;
pub const SPARC_REG_F26: sparc_reg = 27;
pub const SPARC_REG_F27: sparc_reg = 28;
pub const SPARC_REG_F28: sparc_reg = 29;
pub const SPARC_REG_F29: sparc_reg = 30;
pub const SPARC_REG_F30: sparc_reg = 31;
pub const SPARC_REG_F31: sparc_reg = 32;
pub const SPARC_REG_F32: sparc_reg = 33;
pub const SPARC_REG_F34: sparc_reg = 34;
pub const SPARC_REG_F36: sparc_reg = 35;
pub const SPARC_REG_F38: sparc_reg = 36;
pub const SPARC_REG_F40: sparc_reg = 37;
pub const SPARC_REG_F42: sparc_reg = 38;
pub const SPARC_REG_F44: sparc_reg = 39;
pub const SPARC_REG_F46: sparc_reg = 40;
pub const SPARC_REG_F48: sparc_reg = 41;
pub const SPARC_REG_F50: sparc_reg = 42;
pub const SPARC_REG_F52: sparc_reg = 43;
pub const SPARC_REG_F54: sparc_reg = 44;
pub const SPARC_REG_F56: sparc_reg = 45;
pub const SPARC_REG_F58: sparc_reg = 46;
pub const SPARC_REG_F60: sparc_reg = 47;
pub const SPARC_REG_F62: sparc_reg = 48;
pub const SPARC_REG_FCC0: sparc_reg = 49;
pub const SPARC_REG_FCC1: sparc_reg = 50;
pub const SPARC_REG_FCC2: sparc_reg = 51;
pub const SPARC_REG_FCC3: sparc_reg = 52;
pub const SPARC_REG_FP: sparc_reg = 53;
pub const SPARC_REG_G0: sparc_reg = 54;
pub const SPARC_REG_G1: sparc_reg = 55;
pub const SPARC_REG_G2: sparc_reg = 56;
pub const SPARC_REG_G3: sparc_reg = 57;
pub const SPARC_REG_G4: sparc_reg = 58;
pub const SPARC_REG_G5: sparc_reg = 59;
pub const SPARC_REG_G6: sparc_reg = 60;
pub const SPARC_REG_G7: sparc_reg = 61;
pub const SPARC_REG_I0: sparc_reg = 62;
pub const SPARC_REG_I1: sparc_reg = 63;
pub const SPARC_REG_I2: sparc_reg = 64;
pub const SPARC_REG_I3: sparc_reg = 65;
pub const SPARC_REG_I4: sparc_reg = 66;
pub const SPARC_REG_I5: sparc_reg = 67;
pub const SPARC_REG_I7: sparc_reg = 68;
pub const SPARC_REG_ICC: sparc_reg = 69;
pub const SPARC_REG_L0: sparc_reg = 70;
pub const SPARC_REG_L1: sparc_reg = 71;
pub const SPARC_REG_L2: sparc_reg = 72;
pub const SPARC_REG_L3: sparc_reg = 73;
pub const SPARC_REG_L4: sparc_reg = 74;
pub const SPARC_REG_L5: sparc_reg = 75;
pub const SPARC_REG_L6: sparc_reg = 76;
pub const SPARC_REG_L7: sparc_reg = 77;
pub const SPARC_REG_O0: sparc_reg = 78;
pub const SPARC_REG_O1: sparc_reg = 79;
pub const SPARC_REG_O2: sparc_reg = 80;
pub const SPARC_REG_O3: sparc_reg = 81;
pub const SPARC_REG_O4: sparc_reg = 82;
pub const SPARC_REG_O5: sparc_reg = 83;
pub const SPARC_REG_O7: sparc_reg = 84;
pub const SPARC_REG_SP: sparc_reg = 85;
pub const SPARC_REG_Y: sparc_reg = 86;
pub const SPARC_REG_XCC: sparc_reg = 87;
pub const SPARC_REG_ENDING: sparc_reg = 88;
pub const SPARC_REG_O6: sparc_reg = 85;
pub const SPARC_REG_I6: sparc_reg = 53;
pub type sparc_reg = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sparc_op_mem {
    pub base: u8,
    pub index: u8,
    pub disp: i32,
}
#[test]
fn bindgen_test_layout_sparc_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<sparc_op_mem>(),
        8usize,
        concat!("Size of: ", stringify!(sparc_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<sparc_op_mem>(),
        4usize,
        concat!("Alignment of ", stringify!(sparc_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sparc_op_mem>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sparc_op_mem),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sparc_op_mem>())).index as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sparc_op_mem),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sparc_op_mem>())).disp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sparc_op_mem),
            "::",
            stringify!(disp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sparc_op {
    pub type_: sparc_op_type,
    pub __bindgen_anon_1: cs_sparc_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sparc_op__bindgen_ty_1 {
    pub reg: sparc_reg,
    pub imm: i64,
    pub mem: sparc_op_mem,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cs_sparc_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_sparc_op__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cs_sparc_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_sparc_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_sparc_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sparc_op__bindgen_ty_1>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sparc_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sparc_op__bindgen_ty_1>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sparc_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sparc_op__bindgen_ty_1>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sparc_op__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_sparc_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_sparc_op>(),
        16usize,
        concat!("Size of: ", stringify!(cs_sparc_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_sparc_op>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_sparc_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sparc_op>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sparc_op),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sparc {
    pub cc: sparc_cc,
    pub hint: sparc_hint,
    pub op_count: u8,
    pub operands: [cs_sparc_op; 4usize],
}
#[test]
fn bindgen_test_layout_cs_sparc() {
    assert_eq!(
        ::core::mem::size_of::<cs_sparc>(),
        80usize,
        concat!("Size of: ", stringify!(cs_sparc))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_sparc>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_sparc))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sparc>())).cc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sparc),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sparc>())).hint as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sparc),
            "::",
            stringify!(hint)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sparc>())).op_count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sparc),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sparc>())).operands as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sparc),
            "::",
            stringify!(operands)
        )
    );
}
pub const SYSZ_CC_INVALID: sysz_cc = 0;
pub const SYSZ_CC_O: sysz_cc = 1;
pub const SYSZ_CC_H: sysz_cc = 2;
pub const SYSZ_CC_NLE: sysz_cc = 3;
pub const SYSZ_CC_L: sysz_cc = 4;
pub const SYSZ_CC_NHE: sysz_cc = 5;
pub const SYSZ_CC_LH: sysz_cc = 6;
pub const SYSZ_CC_NE: sysz_cc = 7;
pub const SYSZ_CC_E: sysz_cc = 8;
pub const SYSZ_CC_NLH: sysz_cc = 9;
pub const SYSZ_CC_HE: sysz_cc = 10;
pub const SYSZ_CC_NL: sysz_cc = 11;
pub const SYSZ_CC_LE: sysz_cc = 12;
pub const SYSZ_CC_NH: sysz_cc = 13;
pub const SYSZ_CC_NO: sysz_cc = 14;
pub type sysz_cc = libc::c_uint;
pub const SYSZ_OP_INVALID: sysz_op_type = 0;
pub const SYSZ_OP_REG: sysz_op_type = 1;
pub const SYSZ_OP_IMM: sysz_op_type = 2;
pub const SYSZ_OP_MEM: sysz_op_type = 3;
pub const SYSZ_OP_ACREG: sysz_op_type = 64;
pub type sysz_op_type = libc::c_uint;
pub const SYSZ_REG_INVALID: sysz_reg = 0;
pub const SYSZ_REG_0: sysz_reg = 1;
pub const SYSZ_REG_1: sysz_reg = 2;
pub const SYSZ_REG_2: sysz_reg = 3;
pub const SYSZ_REG_3: sysz_reg = 4;
pub const SYSZ_REG_4: sysz_reg = 5;
pub const SYSZ_REG_5: sysz_reg = 6;
pub const SYSZ_REG_6: sysz_reg = 7;
pub const SYSZ_REG_7: sysz_reg = 8;
pub const SYSZ_REG_8: sysz_reg = 9;
pub const SYSZ_REG_9: sysz_reg = 10;
pub const SYSZ_REG_10: sysz_reg = 11;
pub const SYSZ_REG_11: sysz_reg = 12;
pub const SYSZ_REG_12: sysz_reg = 13;
pub const SYSZ_REG_13: sysz_reg = 14;
pub const SYSZ_REG_14: sysz_reg = 15;
pub const SYSZ_REG_15: sysz_reg = 16;
pub const SYSZ_REG_CC: sysz_reg = 17;
pub const SYSZ_REG_F0: sysz_reg = 18;
pub const SYSZ_REG_F1: sysz_reg = 19;
pub const SYSZ_REG_F2: sysz_reg = 20;
pub const SYSZ_REG_F3: sysz_reg = 21;
pub const SYSZ_REG_F4: sysz_reg = 22;
pub const SYSZ_REG_F5: sysz_reg = 23;
pub const SYSZ_REG_F6: sysz_reg = 24;
pub const SYSZ_REG_F7: sysz_reg = 25;
pub const SYSZ_REG_F8: sysz_reg = 26;
pub const SYSZ_REG_F9: sysz_reg = 27;
pub const SYSZ_REG_F10: sysz_reg = 28;
pub const SYSZ_REG_F11: sysz_reg = 29;
pub const SYSZ_REG_F12: sysz_reg = 30;
pub const SYSZ_REG_F13: sysz_reg = 31;
pub const SYSZ_REG_F14: sysz_reg = 32;
pub const SYSZ_REG_F15: sysz_reg = 33;
pub const SYSZ_REG_R0L: sysz_reg = 34;
pub const SYSZ_REG_A0: sysz_reg = 35;
pub const SYSZ_REG_A1: sysz_reg = 36;
pub const SYSZ_REG_A2: sysz_reg = 37;
pub const SYSZ_REG_A3: sysz_reg = 38;
pub const SYSZ_REG_A4: sysz_reg = 39;
pub const SYSZ_REG_A5: sysz_reg = 40;
pub const SYSZ_REG_A6: sysz_reg = 41;
pub const SYSZ_REG_A7: sysz_reg = 42;
pub const SYSZ_REG_A8: sysz_reg = 43;
pub const SYSZ_REG_A9: sysz_reg = 44;
pub const SYSZ_REG_A10: sysz_reg = 45;
pub const SYSZ_REG_A11: sysz_reg = 46;
pub const SYSZ_REG_A12: sysz_reg = 47;
pub const SYSZ_REG_A13: sysz_reg = 48;
pub const SYSZ_REG_A14: sysz_reg = 49;
pub const SYSZ_REG_A15: sysz_reg = 50;
pub const SYSZ_REG_C0: sysz_reg = 51;
pub const SYSZ_REG_C1: sysz_reg = 52;
pub const SYSZ_REG_C2: sysz_reg = 53;
pub const SYSZ_REG_C3: sysz_reg = 54;
pub const SYSZ_REG_C4: sysz_reg = 55;
pub const SYSZ_REG_C5: sysz_reg = 56;
pub const SYSZ_REG_C6: sysz_reg = 57;
pub const SYSZ_REG_C7: sysz_reg = 58;
pub const SYSZ_REG_C8: sysz_reg = 59;
pub const SYSZ_REG_C9: sysz_reg = 60;
pub const SYSZ_REG_C10: sysz_reg = 61;
pub const SYSZ_REG_C11: sysz_reg = 62;
pub const SYSZ_REG_C12: sysz_reg = 63;
pub const SYSZ_REG_C13: sysz_reg = 64;
pub const SYSZ_REG_C14: sysz_reg = 65;
pub const SYSZ_REG_C15: sysz_reg = 66;
pub const SYSZ_REG_V0: sysz_reg = 67;
pub const SYSZ_REG_V1: sysz_reg = 68;
pub const SYSZ_REG_V2: sysz_reg = 69;
pub const SYSZ_REG_V3: sysz_reg = 70;
pub const SYSZ_REG_V4: sysz_reg = 71;
pub const SYSZ_REG_V5: sysz_reg = 72;
pub const SYSZ_REG_V6: sysz_reg = 73;
pub const SYSZ_REG_V7: sysz_reg = 74;
pub const SYSZ_REG_V8: sysz_reg = 75;
pub const SYSZ_REG_V9: sysz_reg = 76;
pub const SYSZ_REG_V10: sysz_reg = 77;
pub const SYSZ_REG_V11: sysz_reg = 78;
pub const SYSZ_REG_V12: sysz_reg = 79;
pub const SYSZ_REG_V13: sysz_reg = 80;
pub const SYSZ_REG_V14: sysz_reg = 81;
pub const SYSZ_REG_V15: sysz_reg = 82;
pub const SYSZ_REG_V16: sysz_reg = 83;
pub const SYSZ_REG_V17: sysz_reg = 84;
pub const SYSZ_REG_V18: sysz_reg = 85;
pub const SYSZ_REG_V19: sysz_reg = 86;
pub const SYSZ_REG_V20: sysz_reg = 87;
pub const SYSZ_REG_V21: sysz_reg = 88;
pub const SYSZ_REG_V22: sysz_reg = 89;
pub const SYSZ_REG_V23: sysz_reg = 90;
pub const SYSZ_REG_V24: sysz_reg = 91;
pub const SYSZ_REG_V25: sysz_reg = 92;
pub const SYSZ_REG_V26: sysz_reg = 93;
pub const SYSZ_REG_V27: sysz_reg = 94;
pub const SYSZ_REG_V28: sysz_reg = 95;
pub const SYSZ_REG_V29: sysz_reg = 96;
pub const SYSZ_REG_V30: sysz_reg = 97;
pub const SYSZ_REG_V31: sysz_reg = 98;
pub const SYSZ_REG_F16: sysz_reg = 99;
pub const SYSZ_REG_F17: sysz_reg = 100;
pub const SYSZ_REG_F18: sysz_reg = 101;
pub const SYSZ_REG_F19: sysz_reg = 102;
pub const SYSZ_REG_F20: sysz_reg = 103;
pub const SYSZ_REG_F21: sysz_reg = 104;
pub const SYSZ_REG_F22: sysz_reg = 105;
pub const SYSZ_REG_F23: sysz_reg = 106;
pub const SYSZ_REG_F24: sysz_reg = 107;
pub const SYSZ_REG_F25: sysz_reg = 108;
pub const SYSZ_REG_F26: sysz_reg = 109;
pub const SYSZ_REG_F27: sysz_reg = 110;
pub const SYSZ_REG_F28: sysz_reg = 111;
pub const SYSZ_REG_F29: sysz_reg = 112;
pub const SYSZ_REG_F30: sysz_reg = 113;
pub const SYSZ_REG_F31: sysz_reg = 114;
pub const SYSZ_REG_F0Q: sysz_reg = 115;
pub const SYSZ_REG_F4Q: sysz_reg = 116;
pub const SYSZ_REG_ENDING: sysz_reg = 117;
pub type sysz_reg = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sysz_op_mem {
    pub base: u8,
    pub index: u8,
    pub length: u64,
    pub disp: i64,
}
#[test]
fn bindgen_test_layout_sysz_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<sysz_op_mem>(),
        24usize,
        concat!("Size of: ", stringify!(sysz_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<sysz_op_mem>(),
        8usize,
        concat!("Alignment of ", stringify!(sysz_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysz_op_mem>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sysz_op_mem),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysz_op_mem>())).index as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(sysz_op_mem),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysz_op_mem>())).length as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sysz_op_mem),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<sysz_op_mem>())).disp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sysz_op_mem),
            "::",
            stringify!(disp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sysz_op {
    pub type_: sysz_op_type,
    pub __bindgen_anon_1: cs_sysz_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_sysz_op__bindgen_ty_1 {
    pub reg: sysz_reg,
    pub imm: i64,
    pub mem: sysz_op_mem,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_cs_sysz_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_sysz_op__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(cs_sysz_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_sysz_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_sysz_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sysz_op__bindgen_ty_1>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sysz_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sysz_op__bindgen_ty_1>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sysz_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sysz_op__bindgen_ty_1>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sysz_op__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_sysz_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_sysz_op>(),
        32usize,
        concat!("Size of: ", stringify!(cs_sysz_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_sysz_op>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_sysz_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sysz_op>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sysz_op),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_sysz {
    pub cc: sysz_cc,
    pub op_count: u8,
    pub operands: [cs_sysz_op; 6usize],
}
#[test]
fn bindgen_test_layout_cs_sysz() {
    assert_eq!(
        ::core::mem::size_of::<cs_sysz>(),
        200usize,
        concat!("Size of: ", stringify!(cs_sysz))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_sysz>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_sysz))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sysz>())).cc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sysz),
            "::",
            stringify!(cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sysz>())).op_count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sysz),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_sysz>())).operands as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_sysz),
            "::",
            stringify!(operands)
        )
    );
}
pub const X86_REG_INVALID: x86_reg = 0;
pub const X86_REG_AH: x86_reg = 1;
pub const X86_REG_AL: x86_reg = 2;
pub const X86_REG_AX: x86_reg = 3;
pub const X86_REG_BH: x86_reg = 4;
pub const X86_REG_BL: x86_reg = 5;
pub const X86_REG_BP: x86_reg = 6;
pub const X86_REG_BPL: x86_reg = 7;
pub const X86_REG_BX: x86_reg = 8;
pub const X86_REG_CH: x86_reg = 9;
pub const X86_REG_CL: x86_reg = 10;
pub const X86_REG_CS: x86_reg = 11;
pub const X86_REG_CX: x86_reg = 12;
pub const X86_REG_DH: x86_reg = 13;
pub const X86_REG_DI: x86_reg = 14;
pub const X86_REG_DIL: x86_reg = 15;
pub const X86_REG_DL: x86_reg = 16;
pub const X86_REG_DS: x86_reg = 17;
pub const X86_REG_DX: x86_reg = 18;
pub const X86_REG_EAX: x86_reg = 19;
pub const X86_REG_EBP: x86_reg = 20;
pub const X86_REG_EBX: x86_reg = 21;
pub const X86_REG_ECX: x86_reg = 22;
pub const X86_REG_EDI: x86_reg = 23;
pub const X86_REG_EDX: x86_reg = 24;
pub const X86_REG_EFLAGS: x86_reg = 25;
pub const X86_REG_EIP: x86_reg = 26;
pub const X86_REG_EIZ: x86_reg = 27;
pub const X86_REG_ES: x86_reg = 28;
pub const X86_REG_ESI: x86_reg = 29;
pub const X86_REG_ESP: x86_reg = 30;
pub const X86_REG_FPSW: x86_reg = 31;
pub const X86_REG_FS: x86_reg = 32;
pub const X86_REG_GS: x86_reg = 33;
pub const X86_REG_IP: x86_reg = 34;
pub const X86_REG_RAX: x86_reg = 35;
pub const X86_REG_RBP: x86_reg = 36;
pub const X86_REG_RBX: x86_reg = 37;
pub const X86_REG_RCX: x86_reg = 38;
pub const X86_REG_RDI: x86_reg = 39;
pub const X86_REG_RDX: x86_reg = 40;
pub const X86_REG_RIP: x86_reg = 41;
pub const X86_REG_RIZ: x86_reg = 42;
pub const X86_REG_RSI: x86_reg = 43;
pub const X86_REG_RSP: x86_reg = 44;
pub const X86_REG_SI: x86_reg = 45;
pub const X86_REG_SIL: x86_reg = 46;
pub const X86_REG_SP: x86_reg = 47;
pub const X86_REG_SPL: x86_reg = 48;
pub const X86_REG_SS: x86_reg = 49;
pub const X86_REG_CR0: x86_reg = 50;
pub const X86_REG_CR1: x86_reg = 51;
pub const X86_REG_CR2: x86_reg = 52;
pub const X86_REG_CR3: x86_reg = 53;
pub const X86_REG_CR4: x86_reg = 54;
pub const X86_REG_CR5: x86_reg = 55;
pub const X86_REG_CR6: x86_reg = 56;
pub const X86_REG_CR7: x86_reg = 57;
pub const X86_REG_CR8: x86_reg = 58;
pub const X86_REG_CR9: x86_reg = 59;
pub const X86_REG_CR10: x86_reg = 60;
pub const X86_REG_CR11: x86_reg = 61;
pub const X86_REG_CR12: x86_reg = 62;
pub const X86_REG_CR13: x86_reg = 63;
pub const X86_REG_CR14: x86_reg = 64;
pub const X86_REG_CR15: x86_reg = 65;
pub const X86_REG_DR0: x86_reg = 66;
pub const X86_REG_DR1: x86_reg = 67;
pub const X86_REG_DR2: x86_reg = 68;
pub const X86_REG_DR3: x86_reg = 69;
pub const X86_REG_DR4: x86_reg = 70;
pub const X86_REG_DR5: x86_reg = 71;
pub const X86_REG_DR6: x86_reg = 72;
pub const X86_REG_DR7: x86_reg = 73;
pub const X86_REG_DR8: x86_reg = 74;
pub const X86_REG_DR9: x86_reg = 75;
pub const X86_REG_DR10: x86_reg = 76;
pub const X86_REG_DR11: x86_reg = 77;
pub const X86_REG_DR12: x86_reg = 78;
pub const X86_REG_DR13: x86_reg = 79;
pub const X86_REG_DR14: x86_reg = 80;
pub const X86_REG_DR15: x86_reg = 81;
pub const X86_REG_FP0: x86_reg = 82;
pub const X86_REG_FP1: x86_reg = 83;
pub const X86_REG_FP2: x86_reg = 84;
pub const X86_REG_FP3: x86_reg = 85;
pub const X86_REG_FP4: x86_reg = 86;
pub const X86_REG_FP5: x86_reg = 87;
pub const X86_REG_FP6: x86_reg = 88;
pub const X86_REG_FP7: x86_reg = 89;
pub const X86_REG_K0: x86_reg = 90;
pub const X86_REG_K1: x86_reg = 91;
pub const X86_REG_K2: x86_reg = 92;
pub const X86_REG_K3: x86_reg = 93;
pub const X86_REG_K4: x86_reg = 94;
pub const X86_REG_K5: x86_reg = 95;
pub const X86_REG_K6: x86_reg = 96;
pub const X86_REG_K7: x86_reg = 97;
pub const X86_REG_MM0: x86_reg = 98;
pub const X86_REG_MM1: x86_reg = 99;
pub const X86_REG_MM2: x86_reg = 100;
pub const X86_REG_MM3: x86_reg = 101;
pub const X86_REG_MM4: x86_reg = 102;
pub const X86_REG_MM5: x86_reg = 103;
pub const X86_REG_MM6: x86_reg = 104;
pub const X86_REG_MM7: x86_reg = 105;
pub const X86_REG_R8: x86_reg = 106;
pub const X86_REG_R9: x86_reg = 107;
pub const X86_REG_R10: x86_reg = 108;
pub const X86_REG_R11: x86_reg = 109;
pub const X86_REG_R12: x86_reg = 110;
pub const X86_REG_R13: x86_reg = 111;
pub const X86_REG_R14: x86_reg = 112;
pub const X86_REG_R15: x86_reg = 113;
pub const X86_REG_ST0: x86_reg = 114;
pub const X86_REG_ST1: x86_reg = 115;
pub const X86_REG_ST2: x86_reg = 116;
pub const X86_REG_ST3: x86_reg = 117;
pub const X86_REG_ST4: x86_reg = 118;
pub const X86_REG_ST5: x86_reg = 119;
pub const X86_REG_ST6: x86_reg = 120;
pub const X86_REG_ST7: x86_reg = 121;
pub const X86_REG_XMM0: x86_reg = 122;
pub const X86_REG_XMM1: x86_reg = 123;
pub const X86_REG_XMM2: x86_reg = 124;
pub const X86_REG_XMM3: x86_reg = 125;
pub const X86_REG_XMM4: x86_reg = 126;
pub const X86_REG_XMM5: x86_reg = 127;
pub const X86_REG_XMM6: x86_reg = 128;
pub const X86_REG_XMM7: x86_reg = 129;
pub const X86_REG_XMM8: x86_reg = 130;
pub const X86_REG_XMM9: x86_reg = 131;
pub const X86_REG_XMM10: x86_reg = 132;
pub const X86_REG_XMM11: x86_reg = 133;
pub const X86_REG_XMM12: x86_reg = 134;
pub const X86_REG_XMM13: x86_reg = 135;
pub const X86_REG_XMM14: x86_reg = 136;
pub const X86_REG_XMM15: x86_reg = 137;
pub const X86_REG_XMM16: x86_reg = 138;
pub const X86_REG_XMM17: x86_reg = 139;
pub const X86_REG_XMM18: x86_reg = 140;
pub const X86_REG_XMM19: x86_reg = 141;
pub const X86_REG_XMM20: x86_reg = 142;
pub const X86_REG_XMM21: x86_reg = 143;
pub const X86_REG_XMM22: x86_reg = 144;
pub const X86_REG_XMM23: x86_reg = 145;
pub const X86_REG_XMM24: x86_reg = 146;
pub const X86_REG_XMM25: x86_reg = 147;
pub const X86_REG_XMM26: x86_reg = 148;
pub const X86_REG_XMM27: x86_reg = 149;
pub const X86_REG_XMM28: x86_reg = 150;
pub const X86_REG_XMM29: x86_reg = 151;
pub const X86_REG_XMM30: x86_reg = 152;
pub const X86_REG_XMM31: x86_reg = 153;
pub const X86_REG_YMM0: x86_reg = 154;
pub const X86_REG_YMM1: x86_reg = 155;
pub const X86_REG_YMM2: x86_reg = 156;
pub const X86_REG_YMM3: x86_reg = 157;
pub const X86_REG_YMM4: x86_reg = 158;
pub const X86_REG_YMM5: x86_reg = 159;
pub const X86_REG_YMM6: x86_reg = 160;
pub const X86_REG_YMM7: x86_reg = 161;
pub const X86_REG_YMM8: x86_reg = 162;
pub const X86_REG_YMM9: x86_reg = 163;
pub const X86_REG_YMM10: x86_reg = 164;
pub const X86_REG_YMM11: x86_reg = 165;
pub const X86_REG_YMM12: x86_reg = 166;
pub const X86_REG_YMM13: x86_reg = 167;
pub const X86_REG_YMM14: x86_reg = 168;
pub const X86_REG_YMM15: x86_reg = 169;
pub const X86_REG_YMM16: x86_reg = 170;
pub const X86_REG_YMM17: x86_reg = 171;
pub const X86_REG_YMM18: x86_reg = 172;
pub const X86_REG_YMM19: x86_reg = 173;
pub const X86_REG_YMM20: x86_reg = 174;
pub const X86_REG_YMM21: x86_reg = 175;
pub const X86_REG_YMM22: x86_reg = 176;
pub const X86_REG_YMM23: x86_reg = 177;
pub const X86_REG_YMM24: x86_reg = 178;
pub const X86_REG_YMM25: x86_reg = 179;
pub const X86_REG_YMM26: x86_reg = 180;
pub const X86_REG_YMM27: x86_reg = 181;
pub const X86_REG_YMM28: x86_reg = 182;
pub const X86_REG_YMM29: x86_reg = 183;
pub const X86_REG_YMM30: x86_reg = 184;
pub const X86_REG_YMM31: x86_reg = 185;
pub const X86_REG_ZMM0: x86_reg = 186;
pub const X86_REG_ZMM1: x86_reg = 187;
pub const X86_REG_ZMM2: x86_reg = 188;
pub const X86_REG_ZMM3: x86_reg = 189;
pub const X86_REG_ZMM4: x86_reg = 190;
pub const X86_REG_ZMM5: x86_reg = 191;
pub const X86_REG_ZMM6: x86_reg = 192;
pub const X86_REG_ZMM7: x86_reg = 193;
pub const X86_REG_ZMM8: x86_reg = 194;
pub const X86_REG_ZMM9: x86_reg = 195;
pub const X86_REG_ZMM10: x86_reg = 196;
pub const X86_REG_ZMM11: x86_reg = 197;
pub const X86_REG_ZMM12: x86_reg = 198;
pub const X86_REG_ZMM13: x86_reg = 199;
pub const X86_REG_ZMM14: x86_reg = 200;
pub const X86_REG_ZMM15: x86_reg = 201;
pub const X86_REG_ZMM16: x86_reg = 202;
pub const X86_REG_ZMM17: x86_reg = 203;
pub const X86_REG_ZMM18: x86_reg = 204;
pub const X86_REG_ZMM19: x86_reg = 205;
pub const X86_REG_ZMM20: x86_reg = 206;
pub const X86_REG_ZMM21: x86_reg = 207;
pub const X86_REG_ZMM22: x86_reg = 208;
pub const X86_REG_ZMM23: x86_reg = 209;
pub const X86_REG_ZMM24: x86_reg = 210;
pub const X86_REG_ZMM25: x86_reg = 211;
pub const X86_REG_ZMM26: x86_reg = 212;
pub const X86_REG_ZMM27: x86_reg = 213;
pub const X86_REG_ZMM28: x86_reg = 214;
pub const X86_REG_ZMM29: x86_reg = 215;
pub const X86_REG_ZMM30: x86_reg = 216;
pub const X86_REG_ZMM31: x86_reg = 217;
pub const X86_REG_R8B: x86_reg = 218;
pub const X86_REG_R9B: x86_reg = 219;
pub const X86_REG_R10B: x86_reg = 220;
pub const X86_REG_R11B: x86_reg = 221;
pub const X86_REG_R12B: x86_reg = 222;
pub const X86_REG_R13B: x86_reg = 223;
pub const X86_REG_R14B: x86_reg = 224;
pub const X86_REG_R15B: x86_reg = 225;
pub const X86_REG_R8D: x86_reg = 226;
pub const X86_REG_R9D: x86_reg = 227;
pub const X86_REG_R10D: x86_reg = 228;
pub const X86_REG_R11D: x86_reg = 229;
pub const X86_REG_R12D: x86_reg = 230;
pub const X86_REG_R13D: x86_reg = 231;
pub const X86_REG_R14D: x86_reg = 232;
pub const X86_REG_R15D: x86_reg = 233;
pub const X86_REG_R8W: x86_reg = 234;
pub const X86_REG_R9W: x86_reg = 235;
pub const X86_REG_R10W: x86_reg = 236;
pub const X86_REG_R11W: x86_reg = 237;
pub const X86_REG_R12W: x86_reg = 238;
pub const X86_REG_R13W: x86_reg = 239;
pub const X86_REG_R14W: x86_reg = 240;
pub const X86_REG_R15W: x86_reg = 241;
pub const X86_REG_ENDING: x86_reg = 242;
pub type x86_reg = libc::c_uint;
pub const X86_OP_INVALID: x86_op_type = 0;
pub const X86_OP_REG: x86_op_type = 1;
pub const X86_OP_IMM: x86_op_type = 2;
pub const X86_OP_MEM: x86_op_type = 3;
pub type x86_op_type = libc::c_uint;
pub const X86_XOP_CC_INVALID: x86_xop_cc = 0;
pub const X86_XOP_CC_LT: x86_xop_cc = 1;
pub const X86_XOP_CC_LE: x86_xop_cc = 2;
pub const X86_XOP_CC_GT: x86_xop_cc = 3;
pub const X86_XOP_CC_GE: x86_xop_cc = 4;
pub const X86_XOP_CC_EQ: x86_xop_cc = 5;
pub const X86_XOP_CC_NEQ: x86_xop_cc = 6;
pub const X86_XOP_CC_FALSE: x86_xop_cc = 7;
pub const X86_XOP_CC_TRUE: x86_xop_cc = 8;
pub type x86_xop_cc = libc::c_uint;
pub const X86_AVX_BCAST_INVALID: x86_avx_bcast = 0;
pub const X86_AVX_BCAST_2: x86_avx_bcast = 1;
pub const X86_AVX_BCAST_4: x86_avx_bcast = 2;
pub const X86_AVX_BCAST_8: x86_avx_bcast = 3;
pub const X86_AVX_BCAST_16: x86_avx_bcast = 4;
pub type x86_avx_bcast = libc::c_uint;
pub const X86_SSE_CC_INVALID: x86_sse_cc = 0;
pub const X86_SSE_CC_EQ: x86_sse_cc = 1;
pub const X86_SSE_CC_LT: x86_sse_cc = 2;
pub const X86_SSE_CC_LE: x86_sse_cc = 3;
pub const X86_SSE_CC_UNORD: x86_sse_cc = 4;
pub const X86_SSE_CC_NEQ: x86_sse_cc = 5;
pub const X86_SSE_CC_NLT: x86_sse_cc = 6;
pub const X86_SSE_CC_NLE: x86_sse_cc = 7;
pub const X86_SSE_CC_ORD: x86_sse_cc = 8;
pub type x86_sse_cc = libc::c_uint;
pub const X86_AVX_CC_INVALID: x86_avx_cc = 0;
pub const X86_AVX_CC_EQ: x86_avx_cc = 1;
pub const X86_AVX_CC_LT: x86_avx_cc = 2;
pub const X86_AVX_CC_LE: x86_avx_cc = 3;
pub const X86_AVX_CC_UNORD: x86_avx_cc = 4;
pub const X86_AVX_CC_NEQ: x86_avx_cc = 5;
pub const X86_AVX_CC_NLT: x86_avx_cc = 6;
pub const X86_AVX_CC_NLE: x86_avx_cc = 7;
pub const X86_AVX_CC_ORD: x86_avx_cc = 8;
pub const X86_AVX_CC_EQ_UQ: x86_avx_cc = 9;
pub const X86_AVX_CC_NGE: x86_avx_cc = 10;
pub const X86_AVX_CC_NGT: x86_avx_cc = 11;
pub const X86_AVX_CC_FALSE: x86_avx_cc = 12;
pub const X86_AVX_CC_NEQ_OQ: x86_avx_cc = 13;
pub const X86_AVX_CC_GE: x86_avx_cc = 14;
pub const X86_AVX_CC_GT: x86_avx_cc = 15;
pub const X86_AVX_CC_TRUE: x86_avx_cc = 16;
pub const X86_AVX_CC_EQ_OS: x86_avx_cc = 17;
pub const X86_AVX_CC_LT_OQ: x86_avx_cc = 18;
pub const X86_AVX_CC_LE_OQ: x86_avx_cc = 19;
pub const X86_AVX_CC_UNORD_S: x86_avx_cc = 20;
pub const X86_AVX_CC_NEQ_US: x86_avx_cc = 21;
pub const X86_AVX_CC_NLT_UQ: x86_avx_cc = 22;
pub const X86_AVX_CC_NLE_UQ: x86_avx_cc = 23;
pub const X86_AVX_CC_ORD_S: x86_avx_cc = 24;
pub const X86_AVX_CC_EQ_US: x86_avx_cc = 25;
pub const X86_AVX_CC_NGE_UQ: x86_avx_cc = 26;
pub const X86_AVX_CC_NGT_UQ: x86_avx_cc = 27;
pub const X86_AVX_CC_FALSE_OS: x86_avx_cc = 28;
pub const X86_AVX_CC_NEQ_OS: x86_avx_cc = 29;
pub const X86_AVX_CC_GE_OQ: x86_avx_cc = 30;
pub const X86_AVX_CC_GT_OQ: x86_avx_cc = 31;
pub const X86_AVX_CC_TRUE_US: x86_avx_cc = 32;
pub type x86_avx_cc = libc::c_uint;
pub const X86_AVX_RM_INVALID: x86_avx_rm = 0;
pub const X86_AVX_RM_RN: x86_avx_rm = 1;
pub const X86_AVX_RM_RD: x86_avx_rm = 2;
pub const X86_AVX_RM_RU: x86_avx_rm = 3;
pub const X86_AVX_RM_RZ: x86_avx_rm = 4;
pub type x86_avx_rm = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct x86_op_mem {
    pub segment: x86_reg,
    pub base: x86_reg,
    pub index: x86_reg,
    pub scale: libc::c_int,
    pub disp: i64,
}
#[test]
fn bindgen_test_layout_x86_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<x86_op_mem>(),
        24usize,
        concat!("Size of: ", stringify!(x86_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<x86_op_mem>(),
        8usize,
        concat!("Alignment of ", stringify!(x86_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<x86_op_mem>())).segment as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_op_mem),
            "::",
            stringify!(segment)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<x86_op_mem>())).base as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_op_mem),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<x86_op_mem>())).index as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_op_mem),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<x86_op_mem>())).scale as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_op_mem),
            "::",
            stringify!(scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<x86_op_mem>())).disp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(x86_op_mem),
            "::",
            stringify!(disp)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_x86_op {
    pub type_: x86_op_type,
    pub __bindgen_anon_1: cs_x86_op__bindgen_ty_1,
    pub size: u8,
    pub access: u8,
    pub avx_bcast: x86_avx_bcast,
    pub avx_zero_opmask: bool,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_x86_op__bindgen_ty_1 {
    pub reg: x86_reg,
    pub imm: i64,
    pub mem: x86_op_mem,
    _bindgen_union_align: [u64; 3usize],
}
#[test]
fn bindgen_test_layout_cs_x86_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_x86_op__bindgen_ty_1>(),
        24usize,
        concat!("Size of: ", stringify!(cs_x86_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_x86_op__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_x86_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_op__bindgen_ty_1>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_op__bindgen_ty_1>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_op__bindgen_ty_1>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_op__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_x86_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_x86_op>(),
        48usize,
        concat!("Size of: ", stringify!(cs_x86_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_x86_op>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_x86_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_op>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_op),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_op>())).size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_op),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_op>())).access as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_op),
            "::",
            stringify!(access)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_op>())).avx_bcast as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_op),
            "::",
            stringify!(avx_bcast)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_op>())).avx_zero_opmask as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_op),
            "::",
            stringify!(avx_zero_opmask)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_x86_encoding {
    pub modrm_offset: u8,
    pub disp_offset: u8,
    pub disp_size: u8,
    pub imm_offset: u8,
    pub imm_size: u8,
}
#[test]
fn bindgen_test_layout_cs_x86_encoding() {
    assert_eq!(
        ::core::mem::size_of::<cs_x86_encoding>(),
        5usize,
        concat!("Size of: ", stringify!(cs_x86_encoding))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_x86_encoding>(),
        1usize,
        concat!("Alignment of ", stringify!(cs_x86_encoding))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_encoding>())).modrm_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_encoding),
            "::",
            stringify!(modrm_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_encoding>())).disp_offset as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_encoding),
            "::",
            stringify!(disp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_encoding>())).disp_size as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_encoding),
            "::",
            stringify!(disp_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_encoding>())).imm_offset as *const _ as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_encoding),
            "::",
            stringify!(imm_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86_encoding>())).imm_size as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86_encoding),
            "::",
            stringify!(imm_size)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_x86 {
    pub prefix: [u8; 4usize],
    pub opcode: [u8; 4usize],
    pub rex: u8,
    pub addr_size: u8,
    pub modrm: u8,
    pub sib: u8,
    pub disp: i64,
    pub sib_index: x86_reg,
    pub sib_scale: i8,
    pub sib_base: x86_reg,
    pub xop_cc: x86_xop_cc,
    pub sse_cc: x86_sse_cc,
    pub avx_cc: x86_avx_cc,
    pub avx_sae: bool,
    pub avx_rm: x86_avx_rm,
    pub __bindgen_anon_1: cs_x86__bindgen_ty_1,
    pub op_count: u8,
    pub operands: [cs_x86_op; 8usize],
    pub encoding: cs_x86_encoding,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_x86__bindgen_ty_1 {
    pub eflags: u64,
    pub fpu_flags: u64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_cs_x86__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_x86__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cs_x86__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_x86__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_x86__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86__bindgen_ty_1>())).eflags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86__bindgen_ty_1),
            "::",
            stringify!(eflags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86__bindgen_ty_1>())).fpu_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86__bindgen_ty_1),
            "::",
            stringify!(fpu_flags)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_x86() {
    assert_eq!(
        ::core::mem::size_of::<cs_x86>(),
        464usize,
        concat!("Size of: ", stringify!(cs_x86))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_x86>(),
        8usize,
        concat!("Alignment of ", stringify!(cs_x86))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).prefix as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).opcode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(opcode)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).rex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(rex)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).addr_size as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(addr_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).modrm as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(modrm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).sib as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(sib)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).disp as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).sib_index as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(sib_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).sib_scale as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(sib_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).sib_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(sib_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).xop_cc as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(xop_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).sse_cc as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(sse_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).avx_cc as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(avx_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).avx_sae as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(avx_sae)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).avx_rm as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(avx_rm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).op_count as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).operands as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_x86>())).encoding as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_x86),
            "::",
            stringify!(encoding)
        )
    );
}
pub const XCORE_OP_INVALID: xcore_op_type = 0;
pub const XCORE_OP_REG: xcore_op_type = 1;
pub const XCORE_OP_IMM: xcore_op_type = 2;
pub const XCORE_OP_MEM: xcore_op_type = 3;
pub type xcore_op_type = libc::c_uint;
pub const XCORE_REG_INVALID: xcore_reg = 0;
pub const XCORE_REG_CP: xcore_reg = 1;
pub const XCORE_REG_DP: xcore_reg = 2;
pub const XCORE_REG_LR: xcore_reg = 3;
pub const XCORE_REG_SP: xcore_reg = 4;
pub const XCORE_REG_R0: xcore_reg = 5;
pub const XCORE_REG_R1: xcore_reg = 6;
pub const XCORE_REG_R2: xcore_reg = 7;
pub const XCORE_REG_R3: xcore_reg = 8;
pub const XCORE_REG_R4: xcore_reg = 9;
pub const XCORE_REG_R5: xcore_reg = 10;
pub const XCORE_REG_R6: xcore_reg = 11;
pub const XCORE_REG_R7: xcore_reg = 12;
pub const XCORE_REG_R8: xcore_reg = 13;
pub const XCORE_REG_R9: xcore_reg = 14;
pub const XCORE_REG_R10: xcore_reg = 15;
pub const XCORE_REG_R11: xcore_reg = 16;
pub const XCORE_REG_PC: xcore_reg = 17;
pub const XCORE_REG_SCP: xcore_reg = 18;
pub const XCORE_REG_SSR: xcore_reg = 19;
pub const XCORE_REG_ET: xcore_reg = 20;
pub const XCORE_REG_ED: xcore_reg = 21;
pub const XCORE_REG_SED: xcore_reg = 22;
pub const XCORE_REG_KEP: xcore_reg = 23;
pub const XCORE_REG_KSP: xcore_reg = 24;
pub const XCORE_REG_ID: xcore_reg = 25;
pub const XCORE_REG_ENDING: xcore_reg = 26;
pub type xcore_reg = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct xcore_op_mem {
    pub base: u8,
    pub index: u8,
    pub disp: i32,
    pub direct: libc::c_int,
}
#[test]
fn bindgen_test_layout_xcore_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<xcore_op_mem>(),
        12usize,
        concat!("Size of: ", stringify!(xcore_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<xcore_op_mem>(),
        4usize,
        concat!("Alignment of ", stringify!(xcore_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xcore_op_mem>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(xcore_op_mem),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xcore_op_mem>())).index as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(xcore_op_mem),
            "::",
            stringify!(index)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xcore_op_mem>())).disp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(xcore_op_mem),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<xcore_op_mem>())).direct as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(xcore_op_mem),
            "::",
            stringify!(direct)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xcore_op {
    pub type_: xcore_op_type,
    pub __bindgen_anon_1: cs_xcore_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_xcore_op__bindgen_ty_1 {
    pub reg: xcore_reg,
    pub imm: i32,
    pub mem: xcore_op_mem,
    _bindgen_union_align: [u32; 3usize],
}
#[test]
fn bindgen_test_layout_cs_xcore_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_xcore_op__bindgen_ty_1>(),
        12usize,
        concat!("Size of: ", stringify!(cs_xcore_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_xcore_op__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_xcore_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_xcore_op__bindgen_ty_1>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_xcore_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_xcore_op__bindgen_ty_1>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_xcore_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_xcore_op__bindgen_ty_1>())).mem as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_xcore_op__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_xcore_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_xcore_op>(),
        16usize,
        concat!("Size of: ", stringify!(cs_xcore_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_xcore_op>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_xcore_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_xcore_op>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_xcore_op),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_xcore {
    pub op_count: u8,
    pub operands: [cs_xcore_op; 8usize],
}
#[test]
fn bindgen_test_layout_cs_xcore() {
    assert_eq!(
        ::core::mem::size_of::<cs_xcore>(),
        132usize,
        concat!("Size of: ", stringify!(cs_xcore))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_xcore>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_xcore))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_xcore>())).op_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_xcore),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_xcore>())).operands as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_xcore),
            "::",
            stringify!(operands)
        )
    );
}
pub const TMS320C64X_OP_INVALID: tms320c64x_op_type = 0;
pub const TMS320C64X_OP_REG: tms320c64x_op_type = 1;
pub const TMS320C64X_OP_IMM: tms320c64x_op_type = 2;
pub const TMS320C64X_OP_MEM: tms320c64x_op_type = 3;
pub const TMS320C64X_OP_REGPAIR: tms320c64x_op_type = 64;
pub type tms320c64x_op_type = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tms320c64x_op_mem {
    pub base: libc::c_uint,
    pub disp: libc::c_uint,
    pub unit: libc::c_uint,
    pub scaled: libc::c_uint,
    pub disptype: libc::c_uint,
    pub direction: libc::c_uint,
    pub modify: libc::c_uint,
}
#[test]
fn bindgen_test_layout_tms320c64x_op_mem() {
    assert_eq!(
        ::core::mem::size_of::<tms320c64x_op_mem>(),
        28usize,
        concat!("Size of: ", stringify!(tms320c64x_op_mem))
    );
    assert_eq!(
        ::core::mem::align_of::<tms320c64x_op_mem>(),
        4usize,
        concat!("Alignment of ", stringify!(tms320c64x_op_mem))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tms320c64x_op_mem>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tms320c64x_op_mem),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tms320c64x_op_mem>())).disp as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tms320c64x_op_mem),
            "::",
            stringify!(disp)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tms320c64x_op_mem>())).unit as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tms320c64x_op_mem),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tms320c64x_op_mem>())).scaled as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tms320c64x_op_mem),
            "::",
            stringify!(scaled)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tms320c64x_op_mem>())).disptype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tms320c64x_op_mem),
            "::",
            stringify!(disptype)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tms320c64x_op_mem>())).direction as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tms320c64x_op_mem),
            "::",
            stringify!(direction)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<tms320c64x_op_mem>())).modify as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tms320c64x_op_mem),
            "::",
            stringify!(modify)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tms320c64x_op {
    pub type_: tms320c64x_op_type,
    pub __bindgen_anon_1: cs_tms320c64x_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_tms320c64x_op__bindgen_ty_1 {
    pub reg: libc::c_uint,
    pub imm: i32,
    pub mem: tms320c64x_op_mem,
    _bindgen_union_align: [u32; 7usize],
}
#[test]
fn bindgen_test_layout_cs_tms320c64x_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_tms320c64x_op__bindgen_ty_1>(),
        28usize,
        concat!("Size of: ", stringify!(cs_tms320c64x_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_tms320c64x_op__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_tms320c64x_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_tms320c64x_op__bindgen_ty_1>())).reg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_tms320c64x_op__bindgen_ty_1>())).imm as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_tms320c64x_op__bindgen_ty_1>())).mem as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x_op__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_tms320c64x_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_tms320c64x_op>(),
        32usize,
        concat!("Size of: ", stringify!(cs_tms320c64x_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_tms320c64x_op>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_tms320c64x_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_tms320c64x_op>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x_op),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_tms320c64x {
    pub op_count: u8,
    pub operands: [cs_tms320c64x_op; 8usize],
    pub condition: cs_tms320c64x__bindgen_ty_1,
    pub funit: cs_tms320c64x__bindgen_ty_2,
    pub parallel: libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_tms320c64x__bindgen_ty_1 {
    pub reg: libc::c_uint,
    pub zero: libc::c_uint,
}
#[test]
fn bindgen_test_layout_cs_tms320c64x__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_tms320c64x__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(cs_tms320c64x__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_tms320c64x__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_tms320c64x__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_tms320c64x__bindgen_ty_1>())).reg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_tms320c64x__bindgen_ty_1>())).zero as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x__bindgen_ty_1),
            "::",
            stringify!(zero)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_tms320c64x__bindgen_ty_2 {
    pub unit: libc::c_uint,
    pub side: libc::c_uint,
    pub crosspath: libc::c_uint,
}
#[test]
fn bindgen_test_layout_cs_tms320c64x__bindgen_ty_2() {
    assert_eq!(
        ::core::mem::size_of::<cs_tms320c64x__bindgen_ty_2>(),
        12usize,
        concat!("Size of: ", stringify!(cs_tms320c64x__bindgen_ty_2))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_tms320c64x__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_tms320c64x__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_tms320c64x__bindgen_ty_2>())).unit as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x__bindgen_ty_2),
            "::",
            stringify!(unit)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_tms320c64x__bindgen_ty_2>())).side as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x__bindgen_ty_2),
            "::",
            stringify!(side)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_tms320c64x__bindgen_ty_2>())).crosspath as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x__bindgen_ty_2),
            "::",
            stringify!(crosspath)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_tms320c64x() {
    assert_eq!(
        ::core::mem::size_of::<cs_tms320c64x>(),
        284usize,
        concat!("Size of: ", stringify!(cs_tms320c64x))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_tms320c64x>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_tms320c64x))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_tms320c64x>())).op_count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_tms320c64x>())).operands as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x),
            "::",
            stringify!(operands)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_tms320c64x>())).condition as *const _ as usize },
        260usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x),
            "::",
            stringify!(condition)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_tms320c64x>())).funit as *const _ as usize },
        268usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x),
            "::",
            stringify!(funit)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_tms320c64x>())).parallel as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_tms320c64x),
            "::",
            stringify!(parallel)
        )
    );
}
pub const M680X_REG_INVALID: m680x_reg = 0;
pub const M680X_REG_A: m680x_reg = 1;
pub const M680X_REG_B: m680x_reg = 2;
pub const M680X_REG_E: m680x_reg = 3;
pub const M680X_REG_F: m680x_reg = 4;
pub const M680X_REG_0: m680x_reg = 5;
pub const M680X_REG_D: m680x_reg = 6;
pub const M680X_REG_W: m680x_reg = 7;
pub const M680X_REG_CC: m680x_reg = 8;
pub const M680X_REG_DP: m680x_reg = 9;
pub const M680X_REG_MD: m680x_reg = 10;
pub const M680X_REG_HX: m680x_reg = 11;
pub const M680X_REG_H: m680x_reg = 12;
pub const M680X_REG_X: m680x_reg = 13;
pub const M680X_REG_Y: m680x_reg = 14;
pub const M680X_REG_S: m680x_reg = 15;
pub const M680X_REG_U: m680x_reg = 16;
pub const M680X_REG_V: m680x_reg = 17;
pub const M680X_REG_Q: m680x_reg = 18;
pub const M680X_REG_PC: m680x_reg = 19;
pub const M680X_REG_TMP2: m680x_reg = 20;
pub const M680X_REG_TMP3: m680x_reg = 21;
pub const M680X_REG_ENDING: m680x_reg = 22;
pub type m680x_reg = libc::c_uint;
pub const M680X_OP_INVALID: m680x_op_type = 0;
pub const M680X_OP_REGISTER: m680x_op_type = 1;
pub const M680X_OP_IMMEDIATE: m680x_op_type = 2;
pub const M680X_OP_INDEXED: m680x_op_type = 3;
pub const M680X_OP_EXTENDED: m680x_op_type = 4;
pub const M680X_OP_DIRECT: m680x_op_type = 5;
pub const M680X_OP_RELATIVE: m680x_op_type = 6;
pub const M680X_OP_CONSTANT: m680x_op_type = 7;
pub type m680x_op_type = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_idx {
    pub base_reg: m680x_reg,
    pub offset_reg: m680x_reg,
    pub offset: i16,
    pub offset_addr: u16,
    pub offset_bits: u8,
    pub inc_dec: i8,
    pub flags: u8,
}
#[test]
fn bindgen_test_layout_m680x_op_idx() {
    assert_eq!(
        ::core::mem::size_of::<m680x_op_idx>(),
        16usize,
        concat!("Size of: ", stringify!(m680x_op_idx))
    );
    assert_eq!(
        ::core::mem::align_of::<m680x_op_idx>(),
        4usize,
        concat!("Alignment of ", stringify!(m680x_op_idx))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_idx>())).base_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_idx),
            "::",
            stringify!(base_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_idx>())).offset_reg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_idx),
            "::",
            stringify!(offset_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_idx>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_idx),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_idx>())).offset_addr as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_idx),
            "::",
            stringify!(offset_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_idx>())).offset_bits as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_idx),
            "::",
            stringify!(offset_bits)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_idx>())).inc_dec as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_idx),
            "::",
            stringify!(inc_dec)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_idx>())).flags as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_idx),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_rel {
    pub address: u16,
    pub offset: i16,
}
#[test]
fn bindgen_test_layout_m680x_op_rel() {
    assert_eq!(
        ::core::mem::size_of::<m680x_op_rel>(),
        4usize,
        concat!("Size of: ", stringify!(m680x_op_rel))
    );
    assert_eq!(
        ::core::mem::align_of::<m680x_op_rel>(),
        2usize,
        concat!("Alignment of ", stringify!(m680x_op_rel))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_rel>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_rel),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_rel>())).offset as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_rel),
            "::",
            stringify!(offset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct m680x_op_ext {
    pub address: u16,
    pub indirect: bool,
}
#[test]
fn bindgen_test_layout_m680x_op_ext() {
    assert_eq!(
        ::core::mem::size_of::<m680x_op_ext>(),
        4usize,
        concat!("Size of: ", stringify!(m680x_op_ext))
    );
    assert_eq!(
        ::core::mem::align_of::<m680x_op_ext>(),
        2usize,
        concat!("Alignment of ", stringify!(m680x_op_ext))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_ext>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_ext),
            "::",
            stringify!(address)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<m680x_op_ext>())).indirect as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(m680x_op_ext),
            "::",
            stringify!(indirect)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m680x_op {
    pub type_: m680x_op_type,
    pub __bindgen_anon_1: cs_m680x_op__bindgen_ty_1,
    pub size: u8,
    pub access: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_m680x_op__bindgen_ty_1 {
    pub imm: i32,
    pub reg: m680x_reg,
    pub idx: m680x_op_idx,
    pub rel: m680x_op_rel,
    pub ext: m680x_op_ext,
    pub direct_addr: u8,
    pub const_val: u8,
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_cs_m680x_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_m680x_op__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cs_m680x_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_m680x_op__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_m680x_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x_op__bindgen_ty_1>())).imm as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x_op__bindgen_ty_1>())).reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x_op__bindgen_ty_1>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op__bindgen_ty_1),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x_op__bindgen_ty_1>())).rel as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op__bindgen_ty_1),
            "::",
            stringify!(rel)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x_op__bindgen_ty_1>())).ext as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op__bindgen_ty_1),
            "::",
            stringify!(ext)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_m680x_op__bindgen_ty_1>())).direct_addr as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op__bindgen_ty_1),
            "::",
            stringify!(direct_addr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_m680x_op__bindgen_ty_1>())).const_val as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op__bindgen_ty_1),
            "::",
            stringify!(const_val)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_m680x_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_m680x_op>(),
        24usize,
        concat!("Size of: ", stringify!(cs_m680x_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_m680x_op>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_m680x_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x_op>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x_op>())).size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x_op>())).access as *const _ as usize },
        21usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x_op),
            "::",
            stringify!(access)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_m680x {
    pub flags: u8,
    pub op_count: u8,
    pub operands: [cs_m680x_op; 9usize],
}
#[test]
fn bindgen_test_layout_cs_m680x() {
    assert_eq!(
        ::core::mem::size_of::<cs_m680x>(),
        220usize,
        concat!("Size of: ", stringify!(cs_m680x))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_m680x>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_m680x))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x>())).op_count as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_m680x>())).operands as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_m680x),
            "::",
            stringify!(operands)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cs_evm {
    pub pop: libc::c_uchar,
    pub push: libc::c_uchar,
    pub fee: libc::c_uint,
}
#[test]
fn bindgen_test_layout_cs_evm() {
    assert_eq!(
        ::core::mem::size_of::<cs_evm>(),
        8usize,
        concat!("Size of: ", stringify!(cs_evm))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_evm>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_evm))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_evm>())).pop as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_evm),
            "::",
            stringify!(pop)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_evm>())).push as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_evm),
            "::",
            stringify!(push)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_evm>())).fee as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_evm),
            "::",
            stringify!(fee)
        )
    );
}
pub const MOS65XX_REG_INVALID: mos65xx_reg = 0;
pub const MOS65XX_REG_ACC: mos65xx_reg = 1;
pub const MOS65XX_REG_X: mos65xx_reg = 2;
pub const MOS65XX_REG_Y: mos65xx_reg = 3;
pub const MOS65XX_REG_P: mos65xx_reg = 4;
pub const MOS65XX_REG_SP: mos65xx_reg = 5;
pub const MOS65XX_REG_ENDING: mos65xx_reg = 6;
pub type mos65xx_reg = libc::c_uint;
pub const MOS65XX_AM_NONE: mos65xx_address_mode = 0;
pub const MOS65XX_AM_IMP: mos65xx_address_mode = 1;
pub const MOS65XX_AM_ACC: mos65xx_address_mode = 2;
pub const MOS65XX_AM_ABS: mos65xx_address_mode = 3;
pub const MOS65XX_AM_ZP: mos65xx_address_mode = 4;
pub const MOS65XX_AM_IMM: mos65xx_address_mode = 5;
pub const MOS65XX_AM_ABSX: mos65xx_address_mode = 6;
pub const MOS65XX_AM_ABSY: mos65xx_address_mode = 7;
pub const MOS65XX_AM_INDX: mos65xx_address_mode = 8;
pub const MOS65XX_AM_INDY: mos65xx_address_mode = 9;
pub const MOS65XX_AM_ZPX: mos65xx_address_mode = 10;
pub const MOS65XX_AM_ZPY: mos65xx_address_mode = 11;
pub const MOS65XX_AM_REL: mos65xx_address_mode = 12;
pub const MOS65XX_AM_IND: mos65xx_address_mode = 13;
pub type mos65xx_address_mode = libc::c_uint;
pub const MOS65XX_OP_INVALID: mos65xx_op_type = 0;
pub const MOS65XX_OP_REG: mos65xx_op_type = 1;
pub const MOS65XX_OP_IMM: mos65xx_op_type = 2;
pub const MOS65XX_OP_MEM: mos65xx_op_type = 3;
pub type mos65xx_op_type = libc::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mos65xx_op {
    pub type_: mos65xx_op_type,
    pub __bindgen_anon_1: cs_mos65xx_op__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union cs_mos65xx_op__bindgen_ty_1 {
    pub reg: mos65xx_reg,
    pub imm: u8,
    pub mem: u16,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_cs_mos65xx_op__bindgen_ty_1() {
    assert_eq!(
        ::core::mem::size_of::<cs_mos65xx_op__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(cs_mos65xx_op__bindgen_ty_1))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_mos65xx_op__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_mos65xx_op__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_mos65xx_op__bindgen_ty_1>())).reg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mos65xx_op__bindgen_ty_1),
            "::",
            stringify!(reg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_mos65xx_op__bindgen_ty_1>())).imm as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mos65xx_op__bindgen_ty_1),
            "::",
            stringify!(imm)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::core::ptr::null::<cs_mos65xx_op__bindgen_ty_1>())).mem as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mos65xx_op__bindgen_ty_1),
            "::",
            stringify!(mem)
        )
    );
}
#[test]
fn bindgen_test_layout_cs_mos65xx_op() {
    assert_eq!(
        ::core::mem::size_of::<cs_mos65xx_op>(),
        8usize,
        concat!("Size of: ", stringify!(cs_mos65xx_op))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_mos65xx_op>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_mos65xx_op))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mos65xx_op>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mos65xx_op),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct cs_mos65xx {
    pub am: mos65xx_address_mode,
    pub modifies_flags: bool,
    pub op_count: u8,
    pub operands: [cs_mos65xx_op; 3usize],
}
#[test]
fn bindgen_test_layout_cs_mos65xx() {
    assert_eq!(
        ::core::mem::size_of::<cs_mos65xx>(),
        32usize,
        concat!("Size of: ", stringify!(cs_mos65xx))
    );
    assert_eq!(
        ::core::mem::align_of::<cs_mos65xx>(),
        4usize,
        concat!("Alignment of ", stringify!(cs_mos65xx))
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mos65xx>())).am as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mos65xx),
            "::",
            stringify!(am)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mos65xx>())).modifies_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mos65xx),
            "::",
            stringify!(modifies_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mos65xx>())).op_count as *const _ as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mos65xx),
            "::",
            stringify!(op_count)
        )
    );
    assert_eq!(
        unsafe { &(*(::core::ptr::null::<cs_mos65xx>())).operands as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cs_mos65xx),
            "::",
            stringify!(operands)
        )
    );
}
